import { AbortController } from 'abort-controller';
export declare type KubescapeFramework = {
    name: string;
    isInstalled: boolean;
    location: string;
};
/** Interface for showing ui stuff for all targets */
export declare type KubescapeUi = {
    /** Show information message to the user
     * @param msg string to display
    */
    info(msg: string): void;
    /** Show error message to the user
     * @param msg string to display
    */
    error(msg: string): void;
    /** Show error message to the user
     * @param msg string to display
    */
    debug(msg: string): void;
    /** Show help message with URL to the user
     * @param message string to display
     * @param url URL to display and allow opening
    */
    showHelp(message: string, url: string): void;
    /** Indicate that some `work` is been done in the background
     * @param title title to display
     * @param work what to do
    */
    slow<T>(title: string, work: () => Promise<T>): Promise<T>;
    /** Show progress for work that takes time
     * @param title the title message to display
     * @param cancel option to pass handle that cancel the work
     * @param work a progress function
    */
    progress<T>(title: string, cancel: AbortController | null, work: (progress: (fraction: number) => void) => Promise<T>): Promise<T>;
};
export declare function isWindows(): boolean;
/**
 * Install kubescape binary on the system
 * @param kubescapeDir Which directory should kubescape be located at
 * @param ui A set of UI fronts to display information graphically
 * @returns true on success
 */
export declare function install(version: string, kubescapeDir: string, ui: KubescapeUi, cancel?: AbortController | undefined): Promise<boolean>;
export interface IKubescapeConfig {
    version: string;
    frameworksDirectory: string | undefined;
    baseDirectory: string;
    requiredFrameworks: string[] | undefined;
    scanFrameworks: string[] | undefined;
}
export declare class KubescapeApi {
    private static _instance;
    private _isInitialized;
    private _isInstalled;
    private _path;
    private _frameworkDir;
    private _versionInfo;
    private _frameworks;
    private constructor();
    static get instance(): KubescapeApi;
    get isInstalled(): boolean;
    get path(): string;
    get directory(): string;
    get version(): string;
    get isLatestVersion(): boolean;
    get frameworkDirectory(): string;
    get frameworksNames(): string[];
    get frameworks(): KubescapeFramework[];
    _buildKubescapeCommand(command: string, kubeconfigPath?: string): string;
    private getKubescapeVersion;
    private downloadMissingFrameworks;
    private downloadAllFrameworks;
    /**
     * Get locally installed framework files
     * @returns A list of installed framework files
     */
    getInstalledFrameworks(): Promise<KubescapeFramework[]>;
    /**
     * Get backend available, yet uninstalled framework files
     * @returns A list of available framework files
     */
    getUninstalledFramework(): Promise<string[]>;
    /**
     * Install frameworks from backend locally
     * @param frameworks A list of desired frameworks to install
     * @param ui Swiss army tools for ui handling
     */
    installFrameworks(frameworks: string[], ui: KubescapeUi): Promise<void>;
    /**
     * Scan yaml files using Kubescape
     * @param ui Swiss army tools for ui handling
     * @param filePath The file path to scan
     * @returns JSON object with the results of the scan
     */
    scanYaml(ui: KubescapeUi, filePath: string): Promise<any>;
    /**
     * Scan yaml files using Kubescape
     * @param ui Swiss army tools for ui handling
     * @param context The cluster context to use for scanning
     * @returns JSON object with the results of the scan
     */
    scanCluster(ui: KubescapeUi, context: string, kubeconfigPath?: string): Promise<any>;
    /**
     * Setup and initialize kubescape
     * @param ui Swiss army tools for ui handling
     * @param configs Kubescape configuration to respect
     * @returns True, on successful installs
     */
    setup(ui: KubescapeUi, configs: IKubescapeConfig, abort?: AbortController | undefined): Promise<boolean>;
}
