/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { ObservableMap } from "mobx";
import type { Disposer } from "../../common/utils";
import type { InstalledExtension } from "../extension-discovery/extension-discovery";
import type { LensExtension, LensExtensionConstructor, LensExtensionId } from "../lens-extension";
import type { LensExtensionState } from "../extensions-store/extensions-store";
import type { CreateExtensionInstance } from "./create-extension-instance.token";
import type { Extension } from "./extension/extension.injectable";
interface Dependencies {
    updateExtensionsState: (extensionsState: Record<LensExtensionId, LensExtensionState>) => void;
    createExtensionInstance: CreateExtensionInstance;
    readonly extensionInstances: ObservableMap<LensExtensionId, LensExtension>;
    getExtension: (instance: LensExtension) => Extension;
}
export interface ExtensionLoading {
    isBundled: boolean;
    loaded: Promise<void>;
}
/**
 * Loads installed extensions to the Lens application
 */
export declare class ExtensionLoader {
    protected readonly dependencies: Dependencies;
    protected readonly extensions: ObservableMap<string, InstalledExtension>;
    /**
     * This is the set of extensions that don't come with either
     * - Main.LensExtension when running in the main process
     * - Renderer.LensExtension when running in the renderer process
     */
    protected readonly nonInstancesByName: import("mobx").ObservableSet<string>;
    /**
     * This is updated by the `observe` in the constructor. DO NOT write directly to it
     */
    protected readonly instancesByName: ObservableMap<string, LensExtension<import("../lens-extension-set-dependencies").LensExtensionDependencies>>;
    private readonly onRemoveExtensionId;
    isLoaded: boolean;
    get whenLoaded(): Promise<void> & {
        cancel(): void;
    };
    constructor(dependencies: Dependencies);
    get userExtensions(): Map<LensExtensionId, InstalledExtension>;
    /**
     * Get the extension instance by its manifest name
     * @param name The name of the extension
     * @returns one of the following:
     * - the instance of `Main.LensExtension` on the main process if created
     * - the instance of `Renderer.LensExtension` on the renderer process if created
     * - `null` if no class definition is provided for the current process
     * - `undefined` if the name is not known about
     */
    getInstanceByName(name: string): LensExtension | null | undefined;
    get storeState(): {
        [k: string]: {
            enabled: boolean;
            name: string;
        };
    };
    init(): Promise<void>;
    initExtensions(extensions: Map<LensExtensionId, InstalledExtension>): void;
    addExtension(extension: InstalledExtension): void;
    removeInstance(lensExtensionId: LensExtensionId): void;
    removeExtension(lensExtensionId: LensExtensionId): void;
    setIsEnabled(lensExtensionId: LensExtensionId, isEnabled: boolean): void;
    protected initMain(): Promise<void>;
    protected initRenderer(): Promise<void>;
    broadcastExtensions(): void;
    syncExtensions(extensions: [LensExtensionId, InstalledExtension][]): void;
    loadOnMain(): void;
    loadOnClusterManagerRenderer: () => Promise<{
        isBundled: boolean;
        loaded: Promise<void>;
    }[]>;
    loadOnClusterRenderer: () => void;
    protected loadExtensions(installedExtensions: Map<string, InstalledExtension>, register: (ext: LensExtension) => Promise<Disposer[]>): Promise<{
        isBundled: boolean;
        loaded: Promise<void>;
    }[]>;
    protected autoInitExtensions(register: (ext: LensExtension) => Promise<Disposer[]>): Promise<{
        isBundled: boolean;
        loaded: Promise<void>;
    }[]>;
    protected requireExtension(extension: InstalledExtension): LensExtensionConstructor | null;
    getExtension(extId: LensExtensionId): InstalledExtension | undefined;
    getInstanceById(extId: LensExtensionId): LensExtension<import("../lens-extension-set-dependencies").LensExtensionDependencies> | undefined;
    toJSON(): Map<LensExtensionId, InstalledExtension>;
}
export {};
