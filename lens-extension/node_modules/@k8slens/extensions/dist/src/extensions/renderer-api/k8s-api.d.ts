/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { KubeResource } from "../../common/rbac";
export declare function isAllowedResource(resource: KubeResource | KubeResource[]): boolean;
export declare const serviceAccountsApi: import("../../common/k8s-api/endpoints").ServiceAccountApi;
export declare const clusterRoleApi: import("../../common/k8s-api/endpoints").ClusterRoleApi;
export declare const clusterRoleBindingApi: import("../../common/k8s-api/endpoints").ClusterRoleBindingApi;
export declare const roleApi: import("../../common/k8s-api/endpoints").RoleApi;
export declare const podsApi: import("../common-api/k8s-api").PodsApi;
export declare const daemonSetApi: import("../../common/k8s-api/endpoints").DaemonSetApi;
export declare const replicaSetApi: import("../../common/k8s-api/endpoints").ReplicaSetApi;
export declare const statefulSetApi: import("../../common/k8s-api/endpoints").StatefulSetApi;
export declare const deploymentApi: import("../common-api/k8s-api").DeploymentApi;
export declare const jobApi: import("../../common/k8s-api/endpoints").JobApi;
export declare const cronJobApi: import("../../common/k8s-api/endpoints").CronJobApi;
export declare const nodesApi: import("../common-api/k8s-api").NodesApi;
export declare const secretsApi: import("../../common/k8s-api/endpoints").SecretApi;
export declare const configMapApi: import("../../common/k8s-api/endpoints").ConfigMapApi;
export declare const resourceQuotaApi: import("../../common/k8s-api/endpoints").ResourceQuotaApi;
export declare const limitRangeApi: import("../../common/k8s-api/endpoints").LimitRangeApi;
export declare const serviceApi: import("../../common/k8s-api/endpoints").ServiceApi;
export declare const hpaApi: import("../../common/k8s-api/endpoints").HorizontalPodAutoscalerApi;
export declare const pdbApi: import("../../common/k8s-api/endpoints").PodDisruptionBudgetApi;
export declare const pcApi: import("../../common/k8s-api/endpoints").PriorityClassApi;
export declare const endpointApi: import("../../common/k8s-api/endpoints").EndpointsApi;
export declare const ingressApi: import("../common-api/k8s-api").IngressApi;
export declare const networkPolicyApi: import("../../common/k8s-api/endpoints").NetworkPolicyApi;
export declare const persistentVolumeApi: import("../../common/k8s-api/endpoints").PersistentVolumeApi;
export declare const pvcApi: import("../common-api/k8s-api").PersistentVolumeClaimsApi;
export declare const storageClassApi: import("../../common/k8s-api/endpoints").StorageClassApi;
export declare const namespacesApi: import("../../common/k8s-api/endpoints").NamespaceApi;
export declare const eventApi: import("../../common/k8s-api/endpoints").KubeEventApi;
export declare const roleBindingApi: import("../../common/k8s-api/endpoints").RoleBindingApi;
export declare const crdApi: import("../../common/k8s-api/endpoints").CustomResourceDefinitionApi;
export * from "../common-api/k8s-api";
export { KubeObjectStatusLevel, type KubeObjectStatus, } from "../../common/k8s-api/kube-object-status";
export type { EventStore } from "../../renderer/components/+events/store";
export type { PodStore as PodsStore } from "../../renderer/components/+workloads-pods/store";
export type { NodeStore as NodesStore } from "../../renderer/components/+nodes/store";
export type { DeploymentStore } from "../../renderer/components/+workloads-deployments/store";
export type { DaemonSetStore } from "../../renderer/components/+workloads-daemonsets/store";
export type { StatefulSetStore } from "../../renderer/components/+workloads-statefulsets/store";
export type { JobStore } from "../../renderer/components/+workloads-jobs/store";
export type { CronJobStore } from "../../renderer/components/+workloads-cronjobs/store";
export type { ConfigMapStore as ConfigMapsStore } from "../../renderer/components/+config-maps/store";
export type { SecretStore as SecretsStore } from "../../renderer/components/+config-secrets/store";
export type { ReplicaSetStore } from "../../renderer/components/+workloads-replicasets/store";
export type { ResourceQuotaStore as ResourceQuotasStore } from "../../renderer/components/+config-resource-quotas/store";
export type { LimitRangeStore as LimitRangesStore } from "../../renderer/components/+config-limit-ranges/store";
export type { HorizontalPodAutoscalerStore as HPAStore } from "../../renderer/components/+config-autoscalers/store";
export type { PodDisruptionBudgetStore as PodDisruptionBudgetsStore } from "../../renderer/components/+config-pod-disruption-budgets/store";
export type { PriorityClassStore as PriorityClassStoreStore } from "../../renderer/components/+config-priority-classes/store";
export type { ServiceStore } from "../../renderer/components/+network-services/store";
export type { EndpointsStore as EndpointStore } from "../../renderer/components/+network-endpoints/store";
export type { IngressStore } from "../../renderer/components/+network-ingresses/store";
export type { NetworkPolicyStore } from "../../renderer/components/+network-policies/store";
export type { PersistentVolumeStore as PersistentVolumesStore } from "../../renderer/components/+storage-volumes/store";
export type { PersistentVolumeClaimStore as VolumeClaimStore } from "../../renderer/components/+storage-volume-claims/store";
export type { StorageClassStore } from "../../renderer/components/+storage-classes/store";
export type { NamespaceStore } from "../../renderer/components/+namespaces/store";
export type { ServiceAccountStore as ServiceAccountsStore } from "../../renderer/components/+user-management/+service-accounts/store";
export type { RoleStore as RolesStore } from "../../renderer/components/+user-management/+roles/store";
export type { RoleBindingStore as RoleBindingsStore } from "../../renderer/components/+user-management/+role-bindings/store";
export type { CustomResourceDefinitionStore as CRDStore } from "../../renderer/components/+custom-resources/definition.store";
export type { CustomResourceStore as CRDResourceStore } from "../../common/k8s-api/api-manager/resource.store";
