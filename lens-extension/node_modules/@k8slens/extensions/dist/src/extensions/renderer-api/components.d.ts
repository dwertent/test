/// <reference types="react" />
import type { ConfirmDialogBooleanParams, ConfirmDialogParams, ConfirmDialogProps } from "../../renderer/components/confirm-dialog";
export * from "../../renderer/components/layout/main-layout";
export * from "../../renderer/components/layout/setting-layout";
export * from "../../renderer/components/layout/page-layout";
export * from "../../renderer/components/layout/wizard-layout";
export * from "../../renderer/components/layout/tab-layout";
export * from "../../renderer/components/button";
export * from "../../renderer/components/checkbox";
export * from "../../renderer/components/radio";
export * from "../../renderer/components/select";
export * from "../../renderer/components/slider";
export * from "../../renderer/components/switch";
export * from "../../renderer/components/input/input";
export declare const CommandOverlay: import("../../renderer/components/command-palette/command-overlay.injectable").CommandOverlay;
export type { CategoryColumnRegistration, AdditionalCategoryColumnRegistration, } from "../../renderer/components/+catalog/custom-category-columns";
export type { ConfirmDialogBooleanParams, ConfirmDialogParams, ConfirmDialogProps, };
export declare const ConfirmDialog: import("react").FunctionComponent<ConfirmDialogProps> & {
    open: import("../../renderer/components/confirm-dialog/open.injectable").OpenConfirmDialog;
    confirm: import("../../renderer/components/confirm-dialog/confirm.injectable").Confirm;
};
export * from "../../renderer/components/icon";
export * from "../../renderer/components/tooltip";
export * from "../../renderer/components/tabs";
export * from "../../renderer/components/table";
export * from "../../renderer/components/badge";
export * from "../../renderer/components/drawer";
export * from "../../renderer/components/dialog";
export * from "../../renderer/components/line-progress";
export * from "../../renderer/components/menu";
export * from "../../renderer/components/notifications";
export * from "../../renderer/components/spinner";
export * from "../../renderer/components/stepper";
export * from "../../renderer/components/wizard";
export * from "../../renderer/components/+workloads-pods/pod-details-list";
export * from "../../renderer/components/+namespaces/namespace-select";
export * from "../../renderer/components/+namespaces/namespace-select-filter";
export * from "../../renderer/components/layout/sub-title";
export * from "../../renderer/components/input/search-input";
export * from "../../renderer/components/chart/bar-chart";
export * from "../../renderer/components/chart/pie-chart";
export { MonacoEditor, type MonacoEditorProps, type MonacoEditorId, type MonacoTheme, type MonacoCustomTheme, } from "../../renderer/components/monaco-editor";
export * from "../../renderer/components/kube-detail-params";
export * from "../../renderer/components/kube-object-details";
export * from "../../renderer/components/kube-object-list-layout";
export * from "../../renderer/components/kube-object-menu";
export * from "../../renderer/components/kube-object-meta";
export * from "../../renderer/components/+events/kube-event-details";
export * from "../../renderer/components/status-brick";
export declare const createTerminalTab: (tabParams?: import("../../renderer/components/dock/dock/store").DockTabCreateSpecific) => Required<import("../../renderer/components/dock/dock/store").DockTabCreate>;
export declare const terminalStore: import("../../renderer/components/dock/terminal/store").TerminalStore & {
    sendCommand: (command: string, options?: import("../../renderer/components/dock/terminal/send-command.injectable").SendCommandOptions) => Promise<void>;
};
export declare const logTabStore: import("../../renderer/components/dock/logs/tab-store").LogTabStore & {
    createPodTab: ({ selectedPod, selectedContainer }: import("../../renderer/components/dock/logs/create-pod-logs-tab.injectable").PodLogsTabData) => string;
    createWorkloadTab: ({ workload }: import("../../renderer/components/dock/logs/create-workload-logs-tab.injectable").WorkloadLogsTabData) => string | undefined;
    renameTab: (tabId: string) => void;
    tabs: undefined;
};
export declare class TerminalStore {
    static getInstance(): import("../../renderer/components/dock/terminal/store").TerminalStore & {
        sendCommand: (command: string, options?: import("../../renderer/components/dock/terminal/send-command.injectable").SendCommandOptions) => Promise<void>;
    };
    static createInstance(): import("../../renderer/components/dock/terminal/store").TerminalStore & {
        sendCommand: (command: string, options?: import("../../renderer/components/dock/terminal/send-command.injectable").SendCommandOptions) => Promise<void>;
    };
    static resetInstance(): void;
}
export declare const notificationsStore: import("../../renderer/components/notifications").NotificationsStore;
