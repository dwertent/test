/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { InstalledExtension } from "./extension-discovery/extension-discovery";
import type { ProtocolHandlerRegistration } from "./registries";
import type { PackageJson } from "type-fest";
import type { Disposer } from "../common/utils";
import type { LensExtensionDependencies } from "./lens-extension-set-dependencies";
export declare type LensExtensionId = string;
export declare type LensExtensionConstructor = new (...args: ConstructorParameters<typeof LensExtension>) => LensExtension;
export interface LensExtensionManifest extends PackageJson {
    name: string;
    version: string;
    main?: string;
    renderer?: string;
    /**
     * Supported Lens version engine by extension could be defined in `manifest.engines.lens`
     * Only MAJOR.MINOR version is taken in consideration.
     */
    engines: {
        lens: string;
        npm?: string;
        node?: string;
    };
}
export declare const lensExtensionDependencies: unique symbol;
export declare const Disposers: unique symbol;
export declare class LensExtension<Dependencies extends LensExtensionDependencies = LensExtensionDependencies> {
    readonly id: LensExtensionId;
    readonly manifest: LensExtensionManifest;
    readonly manifestPath: string;
    readonly isBundled: boolean;
    get sanitizedExtensionId(): string;
    protocolHandlers: ProtocolHandlerRegistration[];
    private _isEnabled;
    get isEnabled(): boolean;
    [Disposers]: import("../common/utils").ExtendableDisposer;
    constructor({ id, manifest, manifestPath, isBundled }: InstalledExtension);
    get name(): string;
    get version(): string;
    get description(): string | undefined;
    readonly [lensExtensionDependencies]: Dependencies;
    /**
     * getExtensionFileFolder returns the path to an already created folder. This
     * folder is for the sole use of this extension.
     *
     * Note: there is no security done on this folder, only obfuscation of the
     * folder name.
     */
    getExtensionFileFolder(): Promise<string>;
    enable(register: (ext: this) => Promise<Disposer[]>): Promise<void>;
    disable(): Promise<void>;
    activate(): Promise<void>;
    protected onActivate(): Promise<void> | void;
    protected onDeactivate(): Promise<void> | void;
}
export declare function sanitizeExtensionName(name: string): string;
export declare function getSanitizedPath(...parts: string[]): string;
export declare function extensionDisplayName(name: string, version: string): string;
