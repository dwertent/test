/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { LensExtensionId } from "../lens-extension";
import { BaseStore } from "../../common/base-store";
export interface LensExtensionsStoreModel {
    extensions: Record<LensExtensionId, LensExtensionState>;
}
export interface LensExtensionState {
    enabled?: boolean;
    name: string;
}
export interface IsEnabledExtensionDescriptor {
    id: string;
    isBundled: boolean;
}
export declare class ExtensionsStore extends BaseStore<LensExtensionsStoreModel> {
    readonly displayName = "ExtensionsStore";
    constructor();
    get enabledExtensions(): string[];
    protected state: import("mobx").ObservableMap<string, LensExtensionState>;
    isEnabled({ id, isBundled }: IsEnabledExtensionDescriptor): boolean;
    mergeState: (extensionsState: Record<LensExtensionId, LensExtensionState> | [LensExtensionId, LensExtensionState][]) => void;
    protected fromStore({ extensions }: LensExtensionsStoreModel): void;
    toJSON(): LensExtensionsStoreModel;
}
