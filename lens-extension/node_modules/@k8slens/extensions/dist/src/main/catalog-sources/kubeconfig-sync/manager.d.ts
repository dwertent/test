/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { IComputedValue, ObservableMap } from "mobx";
import type { CatalogEntity } from "../../../common/catalog";
import type { Disposer } from "../../../common/utils";
import type { KubeConfig } from "@kubernetes/client-node";
import type { ClusterManager } from "../../cluster-manager";
import type { ClusterConfigData, UpdateClusterModel } from "../../../common/cluster-types";
import type { Cluster } from "../../../common/cluster/cluster";
import type { CatalogEntityRegistry } from "../../catalog/entity-registry";
import type { CreateCluster } from "../../../common/cluster/create-cluster-injection-token";
interface KubeconfigSyncManagerDependencies {
    readonly directoryForKubeConfigs: string;
    readonly entityRegistry: CatalogEntityRegistry;
    readonly clusterManager: ClusterManager;
    createCluster: CreateCluster;
}
export declare class KubeconfigSyncManager {
    protected readonly dependencies: KubeconfigSyncManagerDependencies;
    protected readonly sources: ObservableMap<string, [IComputedValue<CatalogEntity<import("../../../common/catalog").CatalogEntityMetadata, import("../../../common/catalog").CatalogEntityStatus, import("../../../common/catalog").CatalogEntitySpec>[]>, Disposer]>;
    protected syncing: boolean;
    protected syncListDisposer?: Disposer;
    constructor(dependencies: KubeconfigSyncManagerDependencies);
    startSync(): void;
    stopSync(): void;
    protected startNewSync(filePath: string): void;
    protected stopOldSync(filePath: string): void;
}
export declare function configToModels(rootConfig: KubeConfig, filePath: string): [UpdateClusterModel, ClusterConfigData][];
declare type RootSourceValue = [Cluster, CatalogEntity];
declare type RootSource = ObservableMap<string, RootSourceValue>;
interface ComputeDiffDependencies {
    directoryForKubeConfigs: string;
    createCluster: CreateCluster;
    clusterManager: ClusterManager;
}
export declare const computeDiff: ({ directoryForKubeConfigs, createCluster, clusterManager }: ComputeDiffDependencies) => (contents: string, source: RootSource, filePath: string) => void;
export {};
