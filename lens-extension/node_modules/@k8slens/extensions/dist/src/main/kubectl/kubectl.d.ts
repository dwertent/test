/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
export interface KubectlDependencies {
    readonly directoryForKubectlBinaries: string;
    readonly normalizedDownloadPlatform: "darwin" | "linux" | "windows";
    readonly normalizedDownloadArch: "amd64" | "arm64" | "386";
    readonly kubectlBinaryName: string;
    readonly bundledKubectlBinaryPath: string;
    readonly baseBundeledBinariesDirectory: string;
    readonly userStore: {
        readonly kubectlBinariesPath?: string;
        readonly downloadBinariesPath?: string;
        readonly downloadKubectlBinaries: boolean;
        readonly downloadMirror: string;
    };
}
export declare class Kubectl {
    protected readonly dependencies: KubectlDependencies;
    readonly kubectlVersion: string;
    protected readonly url: string;
    protected readonly path: string;
    protected readonly dirname: string;
    static readonly bundledKubectlVersion: string;
    static invalidBundle: boolean;
    constructor(dependencies: KubectlDependencies, clusterVersion: string);
    getBundledPath(): string;
    getPathFromPreferences(): string;
    protected getDownloadDir(): string;
    getPath: (bundled?: boolean) => Promise<string>;
    binDir(): Promise<string>;
    checkBinary(path: string, checkVersion?: boolean): Promise<boolean>;
    protected checkBundled(): Promise<boolean>;
    ensureKubectl(): Promise<boolean>;
    downloadKubectl(): Promise<void>;
    protected writeInitScripts(): Promise<void>;
    protected getDownloadMirror(): string;
}
