/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { ClusterMetadata } from "../../common/cluster-types";
import type { Cluster } from "../../common/cluster/cluster";
import type { BaseClusterDetector } from "./base-cluster-detector";
import type { K8sRequest } from "../k8s-request.injectable";
interface Dependencies {
    k8sRequest: K8sRequest;
}
export declare type DetectorConstructor = new (cluster: Cluster, k8sRequest: K8sRequest) => BaseClusterDetector;
export declare class DetectorRegistry {
    private dependencies;
    constructor(dependencies: Dependencies);
    registry: import("mobx").IObservableArray<DetectorConstructor>;
    add(detectorClass: DetectorConstructor): this;
    detectForCluster(cluster: Cluster): Promise<ClusterMetadata>;
}
export {};
