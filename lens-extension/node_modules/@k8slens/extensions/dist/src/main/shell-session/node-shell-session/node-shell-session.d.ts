/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
/// <reference types="node" />
/// <reference types="node/http" />
/// <reference types="got/dist/source/core/utils/timed-out" />
import type WebSocket from "ws";
import { CoreV1Api } from "@kubernetes/client-node";
import type { KubeConfig } from "@kubernetes/client-node";
import type { Cluster } from "../../../common/cluster/cluster";
import { ShellSession } from "../shell-session";
import type { Kubectl } from "../../kubectl/kubectl";
export declare class NodeShellSession extends ShellSession {
    protected nodeName: string;
    ShellType: string;
    protected readonly podName: string;
    protected readonly cwd: string | undefined;
    constructor(nodeName: string, kubectl: Kubectl, socket: WebSocket, cluster: Cluster, terminalId: string);
    open(): Promise<void>;
    protected createNodeShellPod(coreApi: CoreV1Api): Promise<{
        response: import("http").IncomingMessage;
        body: import("@kubernetes/client-node").V1Pod;
    }>;
    protected waitForRunningPod(kc: KubeConfig): Promise<void>;
}
