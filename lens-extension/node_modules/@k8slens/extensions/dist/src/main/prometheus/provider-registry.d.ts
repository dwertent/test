/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { CoreV1Api } from "@kubernetes/client-node";
export interface PrometheusService {
    id: string;
    namespace: string;
    service: string;
    port: number;
}
export declare abstract class PrometheusProvider {
    abstract readonly id: string;
    abstract readonly name: string;
    abstract readonly rateAccuracy: string;
    abstract readonly isConfigurable: boolean;
    abstract getQuery(opts: Record<string, string>, queryName: string): string;
    abstract getPrometheusService(client: CoreV1Api): Promise<PrometheusService | undefined>;
    protected bytesSent(ingress: string, namespace: string, statuses: string): string;
    protected getFirstNamespacedService(client: CoreV1Api, ...selectors: string[]): Promise<PrometheusService>;
    protected getNamespacedService(client: CoreV1Api, name: string, namespace: string): Promise<PrometheusService>;
}
export declare class PrometheusProviderRegistry {
    providers: Map<string, PrometheusProvider>;
    getByKind(kind: string): PrometheusProvider;
    registerProvider(provider: PrometheusProvider): this;
}
