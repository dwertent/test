/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
/// <reference types="node" />
import Call from "@hapi/call";
import type http from "http";
import type { Cluster } from "../../common/cluster/cluster";
import type { LensApiRequest, Route } from "./route";
import type { ServerIncomingMessage } from "../lens-proxy/lens-proxy";
import type { ParseRequest } from "./parse-request.injectable";
export interface RouterRequestOpts {
    req: http.IncomingMessage;
    res: http.ServerResponse;
    cluster: Cluster | undefined;
    params: Partial<Record<string, string>>;
    url: URL;
}
interface Dependencies {
    parseRequest: ParseRequest;
}
export declare class Router {
    private dependencies;
    protected router: Call.Router<(request: LensApiRequest<string>, response: http.ServerResponse) => Promise<void>>;
    constructor(routes: Route<unknown, string>[], dependencies: Dependencies);
    route(cluster: Cluster | undefined, req: ServerIncomingMessage, res: http.ServerResponse): Promise<boolean>;
    protected getRequest(opts: RouterRequestOpts): Promise<LensApiRequest<string>>;
}
export {};
