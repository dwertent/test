/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { Cluster } from "../../common/cluster/cluster";
import type { ClusterContextHandler } from "../context-handler/context-handler";
import type { Logger } from "../../common/logger";
export interface KubeconfigManagerDependencies {
    readonly directoryForTemp: string;
    readonly logger: Logger;
    lensProxyPort: {
        get: () => number;
    };
}
export declare class KubeconfigManager {
    private readonly dependencies;
    protected cluster: Cluster;
    /**
     * The path to the temp config file
     *
     * - if `string` then path
     * - if `null` then not yet created
     * - if `undefined` then unlinked by calling `clear()`
     */
    protected tempFilePath: string | null | undefined;
    protected readonly contextHandler: ClusterContextHandler;
    constructor(dependencies: KubeconfigManagerDependencies, cluster: Cluster);
    /**
     *
     * @returns The path to the temporary kubeconfig
     */
    getPath(): Promise<string>;
    /**
     * Deletes the temporary kubeconfig file
     */
    clear(): Promise<void>;
    protected ensureFile(): Promise<string>;
    get resolveProxyUrl(): string;
    /**
     * Creates new "temporary" kubeconfig that point to the kubectl-proxy.
     * This way any user of the config does not need to know anything about the auth etc. details.
     */
    protected createProxyKubeconfig(): Promise<string>;
}
