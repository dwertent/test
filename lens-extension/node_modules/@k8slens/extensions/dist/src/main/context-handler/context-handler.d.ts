/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
/// <reference types="node" />
import type { PrometheusProvider, PrometheusService, PrometheusProviderRegistry } from "../prometheus/provider-registry";
import type { ClusterPrometheusPreferences } from "../../common/cluster-types";
import type { Cluster } from "../../common/cluster/cluster";
import type httpProxy from "http-proxy";
import type { UrlWithStringQuery } from "url";
import type { KubeAuthProxy } from "../kube-auth-proxy/kube-auth-proxy";
import type { CreateKubeAuthProxy } from "../kube-auth-proxy/create-kube-auth-proxy.injectable";
export interface PrometheusDetails {
    prometheusPath: string;
    provider: PrometheusProvider;
}
interface PrometheusServicePreferences {
    namespace: string;
    service: string;
    port: number;
    prefix: string;
}
interface Dependencies {
    readonly createKubeAuthProxy: CreateKubeAuthProxy;
    readonly authProxyCa: string;
    readonly prometheusProviderRegistry: PrometheusProviderRegistry;
}
export interface ClusterContextHandler {
    readonly clusterUrl: UrlWithStringQuery;
    setupPrometheus(preferences?: ClusterPrometheusPreferences): void;
    getPrometheusDetails(): Promise<PrometheusDetails>;
    resolveAuthProxyUrl(): Promise<string>;
    resolveAuthProxyCa(): string;
    getApiTarget(isLongRunningRequest?: boolean): Promise<httpProxy.ServerOptions>;
    restartServer(): Promise<void>;
    ensureServer(): Promise<void>;
    stopServer(): void;
}
export declare class ContextHandler implements ClusterContextHandler {
    private dependencies;
    protected cluster: Cluster;
    readonly clusterUrl: UrlWithStringQuery;
    protected kubeAuthProxy?: KubeAuthProxy;
    protected apiTarget?: httpProxy.ServerOptions;
    protected prometheusProvider?: string;
    protected prometheus?: PrometheusServicePreferences;
    constructor(dependencies: Dependencies, cluster: Cluster);
    setupPrometheus(preferences?: ClusterPrometheusPreferences): void;
    getPrometheusDetails(): Promise<PrometheusDetails>;
    protected ensurePrometheusPath({ service, namespace, port }: PrometheusService): string;
    protected ensurePrometheusProvider(service: PrometheusService): PrometheusProvider;
    protected listPotentialProviders(): PrometheusProvider[];
    protected getPrometheusService(): Promise<PrometheusService>;
    resolveAuthProxyUrl(): Promise<string>;
    resolveAuthProxyCa(): string;
    getApiTarget(isLongRunningRequest?: boolean): Promise<httpProxy.ServerOptions>;
    protected newApiTarget(timeout: number): Promise<httpProxy.ServerOptions>;
    protected ensureServerHelper(): Promise<KubeAuthProxy>;
    ensureServer(): Promise<void>;
    restartServer(): Promise<void>;
    stopServer(): void;
}
export {};
