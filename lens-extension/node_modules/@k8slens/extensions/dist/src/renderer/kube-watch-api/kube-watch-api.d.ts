import type { Disposer } from "../../common/utils";
import type { ClusterFrameContext } from "../cluster-frame-context/cluster-frame-context";
import type { KubeObjectStoreLoadAllParams, KubeObjectStoreSubscribeParams } from "../../common/k8s-api/kube-object.store";
export interface KubeWatchSubscribeStoreOptions {
    /**
     * The namespaces to watch
     * @default all selected namespaces
     */
    namespaces?: string[];
    /**
     * A function that is called when listing fails. If set then blocks errors
     * from rejecting promises
     */
    onLoadFailure?: (err: any) => void;
}
interface Dependencies {
    clusterFrameContext: ClusterFrameContext;
}
export interface SubscribableStore {
    readonly api: {
        readonly isNamespaced: boolean;
        readonly apiBase: string;
        readonly kind: string;
    };
    loadAll(opts?: KubeObjectStoreLoadAllParams): Promise<unknown>;
    subscribe(opts?: KubeObjectStoreSubscribeParams): Disposer;
}
export declare type SubscribeStores = (stores: SubscribableStore[], opts?: KubeWatchSubscribeStoreOptions) => Disposer;
export declare class KubeWatchApi {
    #private;
    private dependencies;
    constructor(dependencies: Dependencies);
    private subscribeStore;
    subscribeStores: SubscribeStores;
    protected log(message: any, meta: any): void;
}
export {};
