/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { Cluster } from "../../../../common/cluster/cluster";
import type { CatalogEntityRegistry } from "../../../api/catalog/entity/registry";
import type { AppEvent } from "../../../../common/app-event-bus/event-bus";
import type { CatalogEntity } from "../../../../common/catalog";
import type { ClusterFrameContext } from "../../../cluster-frame-context/cluster-frame-context";
interface Dependencies {
    hostedCluster: Cluster;
    loadExtensions: (getCluster: () => CatalogEntity) => void;
    catalogEntityRegistry: CatalogEntityRegistry;
    frameRoutingId: number;
    emitEvent: (event: AppEvent) => void;
    clusterFrameContext: ClusterFrameContext;
}
export declare const initClusterFrame: ({ hostedCluster, loadExtensions, catalogEntityRegistry, frameRoutingId, emitEvent, clusterFrameContext, }: Dependencies) => (unmountRoot: () => void) => Promise<void>;
export {};
