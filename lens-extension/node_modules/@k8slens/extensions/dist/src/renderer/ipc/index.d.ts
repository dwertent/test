/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { OpenDialogOptions } from "electron";
import type { ClusterId, ClusterState } from "../../common/cluster-types";
import { type WindowAction } from "../../common/ipc/window";
import type { InstalledExtension } from "../../extensions/extension-discovery/extension-discovery";
import type { LensExtensionId } from "../../extensions/lens-extension";
import type { Location } from "history";
export declare function emitOpenAppMenuAsContextMenu(): void;
export declare function emitWindowLocationChanged(location: Location): void;
export declare function requestWindowAction(type: WindowAction): Promise<void>;
export declare function requestOpenFilePickingDialog(opts: OpenDialogOptions): Promise<{
    canceled: boolean;
    filePaths: string[];
}>;
export declare function requestSetClusterFrameId(clusterId: ClusterId): Promise<void>;
export declare function requestClusterActivation(clusterId: ClusterId, force?: boolean): Promise<void>;
export declare function requestClusterDisconnection(clusterId: ClusterId, force?: boolean): Promise<void>;
export declare function requestSetClusterAsDeleting(clusterId: ClusterId): Promise<void>;
export declare function requestClearClusterAsDeleting(clusterId: ClusterId): Promise<void>;
export declare function requestDeleteCluster(clusterId: ClusterId): Promise<void>;
export declare function requestInitialClusterStates(): Promise<{
    id: string;
    state: ClusterState;
}[]>;
export declare function requestKubectlApplyAll(clusterId: ClusterId, resources: string[], kubectlArgs: string[]): Promise<{
    stderr?: string;
    stdout?: string;
}>;
export declare function requestKubectlDeleteAll(clusterId: ClusterId, resources: string[], kubectlArgs: string[]): Promise<{
    stderr?: string;
    stdout?: string;
}>;
export declare function requestInitialExtensionDiscovery(): Promise<{
    isLoaded: boolean;
}>;
export declare function requestExtensionLoaderInitialState(): Promise<[LensExtensionId, InstalledExtension][]>;
