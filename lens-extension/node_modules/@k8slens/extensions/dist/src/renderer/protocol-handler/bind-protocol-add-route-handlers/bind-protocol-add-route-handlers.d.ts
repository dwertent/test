/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { LensProtocolRouterRenderer } from "../lens-protocol-router-renderer/lens-protocol-router-renderer";
import type { CatalogEntityRegistry } from "../../api/catalog/entity/registry";
import type { NavigateToCatalog } from "../../../common/front-end-routing/routes/catalog/navigate-to-catalog.injectable";
import type { NavigateToEntitySettings } from "../../../common/front-end-routing/routes/entity-settings/navigate-to-entity-settings.injectable";
import type { NavigateToClusterView } from "../../../common/front-end-routing/routes/cluster-view/navigate-to-cluster-view.injectable";
import type { AttemptInstallByInfo } from "../../components/+extensions/attempt-install-by-info.injectable";
interface Dependencies {
    attemptInstallByInfo: AttemptInstallByInfo;
    lensProtocolRouterRenderer: LensProtocolRouterRenderer;
    navigateToCatalog: NavigateToCatalog;
    navigateToAddCluster: () => void;
    navigateToExtensions: () => void;
    navigateToEntitySettings: NavigateToEntitySettings;
    navigateToClusterView: NavigateToClusterView;
    navigateToPreferenceTabId: (tabId: string) => void;
    entityRegistry: CatalogEntityRegistry;
}
export declare const bindProtocolAddRouteHandlers: ({ attemptInstallByInfo, lensProtocolRouterRenderer, navigateToCatalog, navigateToAddCluster, navigateToExtensions, navigateToEntitySettings, navigateToClusterView, navigateToPreferenceTabId, entityRegistry, }: Dependencies) => () => void;
export {};
