/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { MonacoTheme } from "../components/monaco-editor";
import type { IpcRenderer } from "electron";
export declare type ThemeId = string;
export interface Theme {
    name: string;
    type: "dark" | "light";
    colors: Record<string, string>;
    description: string;
    author: string;
    monacoTheme: MonacoTheme;
}
interface Dependencies {
    readonly userStore: {
        colorTheme: string;
        terminalTheme: ThemeId;
        resetTheme(): void;
    };
    readonly ipcRenderer: IpcRenderer;
}
export declare class ThemeStore {
    #private;
    protected readonly dependencies: Dependencies;
    private terminalColorPrefix;
    private osNativeThemeType;
    private get colorThemePreference();
    private get activeThemeId();
    private get terminalThemeId();
    private readonly defaultTheme;
    get activeTheme(): Theme;
    private get terminalColors();
    get xtermColors(): Record<string, string>;
    get themes(): import("type-fest/source/readonly-deep").ReadonlyMapDeep<string, Theme>;
    constructor(dependencies: Dependencies);
    init(): Promise<void>;
    getThemeById(themeId: ThemeId): Theme | undefined;
    protected applyActiveTheme(): void;
}
export {};
