import type { IObservableValue } from "mobx";
import type { TargetHelmRelease } from "../target-helm-release.injectable";
import type { CallForHelmRelease } from "./call-for-helm-release/call-for-helm-release.injectable";
import type { ThemeStore } from "../../../../themes/store";
import type { CallForHelmReleaseConfiguration } from "./call-for-helm-release-configuration/call-for-helm-release-configuration.injectable";
import type { GetResourceDetailsUrl } from "./get-resource-details-url.injectable";
import type { CallForHelmReleaseUpdate } from "../../update-release/call-for-helm-release-update/call-for-helm-release-update.injectable";
import type { ShowCheckedErrorNotification } from "../../../notifications/show-checked-error.injectable";
import type { ShowNotification } from "../../../notifications";
import type { HelmRelease } from "../../../../../common/k8s-api/endpoints/helm-releases.api";
import type { NavigateToHelmReleases } from "../../../../../common/front-end-routing/routes/cluster/helm/releases/navigate-to-helm-releases.injectable";
declare const releaseDetailsModelInjectable: import("@ogre-tools/injectable").Injectable<ReleaseDetailsModel, unknown, TargetHelmRelease>;
export default releaseDetailsModelInjectable;
export interface OnlyUserSuppliedValuesAreShownToggle {
    value: IObservableValue<boolean>;
    toggle: () => Promise<void>;
}
export interface ConfigurationInput {
    nonSavedValue: IObservableValue<string>;
    isLoading: IObservableValue<boolean>;
    isSaving: IObservableValue<boolean>;
    onChange: (value: string) => void;
    save: () => Promise<void>;
}
interface Dependencies {
    callForHelmRelease: CallForHelmRelease;
    targetRelease: TargetHelmRelease;
    themeStore: ThemeStore;
    callForHelmReleaseConfiguration: CallForHelmReleaseConfiguration;
    getResourceDetailsUrl: GetResourceDetailsUrl;
    updateRelease: CallForHelmReleaseUpdate;
    showCheckedErrorNotification: ShowCheckedErrorNotification;
    showSuccessNotification: ShowNotification;
    createUpgradeChartTab: (release: HelmRelease) => string;
    navigateToHelmReleases: NavigateToHelmReleases;
}
export declare class ReleaseDetailsModel {
    private dependencies;
    id: string;
    constructor(dependencies: Dependencies);
    private detailedRelease;
    readonly isLoading: IObservableValue<boolean>;
    readonly configuration: ConfigurationInput;
    readonly onlyUserSuppliedValuesAreShown: OnlyUserSuppliedValuesAreShownToggle;
    load: () => Promise<void>;
    private loadConfiguration;
    get release(): HelmRelease;
    private get details();
    get notes(): string;
    get groupedResources(): MinimalResourceGroup[];
    get activeTheme(): "dark" | "light";
    close: () => void;
    startUpgradeProcess: () => void;
}
export interface MinimalResourceGroup {
    kind: string;
    isNamespaced: boolean;
    resources: MinimalResource[];
}
export interface MinimalResource {
    uid: string | undefined;
    name: string;
    namespace: string | undefined;
    detailsUrl: string | undefined;
    creationTimestamp: string | undefined;
}
