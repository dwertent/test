/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import "./item-list-layout.scss";
import type { ReactNode } from "react";
import React from "react";
import type { ConfirmDialogParams } from "../confirm-dialog";
import type { TableCellProps, TableProps, TableRowProps, TableSortCallbacks } from "../table";
import type { IClassName } from "../../utils";
import type { AddRemoveButtonsProps } from "../add-remove-buttons";
import type { ItemObject } from "../../../common/item.store";
import type { Filter } from "./page-filters/store";
import type { ItemListStore } from "./list-layout";
export interface ItemListLayoutContentProps<Item extends ItemObject, PreLoadStores extends boolean> {
    getFilters: () => Filter[];
    tableId?: string;
    className: IClassName;
    getItems: () => Item[];
    store: ItemListStore<Item, PreLoadStores>;
    getIsReady: () => boolean;
    isSelectable?: boolean;
    isConfigurable?: boolean;
    copyClassNameFromHeadCells?: boolean;
    sortingCallbacks?: TableSortCallbacks<Item>;
    tableProps?: Partial<TableProps<Item>>;
    renderTableHeader?: (TableCellProps | undefined | null)[];
    renderTableContents: (item: Item) => (ReactNode | TableCellProps)[];
    renderItemMenu?: (item: Item, store: ItemListStore<Item, PreLoadStores>) => ReactNode;
    customizeTableRowProps?: (item: Item) => Partial<TableRowProps<Item>>;
    addRemoveButtons?: Partial<AddRemoveButtonsProps>;
    virtual?: boolean;
    hasDetailsView?: boolean;
    detailsItem?: Item;
    onDetails?: (item: Item) => void;
    customizeRemoveDialog?: (selectedItems: Item[]) => Partial<ConfirmDialogParams>;
    spinnerTestId?: string;
    /**
     * Message to display when a store failed to load
     *
     * @default "Failed to load items"
     */
    failedToLoadMessage?: React.ReactNode;
}
export declare const ItemListLayoutContent: <Item extends ItemObject, PreLoadStores extends boolean>(props: ItemListLayoutContentProps<Item, PreLoadStores>) => React.ReactElement;
