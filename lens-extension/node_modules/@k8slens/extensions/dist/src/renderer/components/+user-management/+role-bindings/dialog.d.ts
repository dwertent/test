/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import "./dialog.scss";
import React from "react";
import type { ClusterRole, Role, RoleBinding, ServiceAccount } from "../../../../common/k8s-api/endpoints";
import type { DialogProps } from "../../dialog";
import type { SelectOption } from "../../select";
import { ObservableHashSet } from "../../../utils";
import type { Subject } from "../../../../common/k8s-api/endpoints/types/subject";
export interface RoleBindingDialogProps extends Partial<DialogProps> {
}
interface DialogState {
    isOpen: boolean;
    data?: RoleBinding;
}
export declare class RoleBindingDialog extends React.Component<RoleBindingDialogProps> {
    static state: DialogState;
    constructor(props: RoleBindingDialogProps);
    static open(roleBinding?: RoleBinding): void;
    static close(): void;
    get roleBinding(): RoleBinding | undefined;
    get isEditing(): boolean;
    selectedRoleRef: Role | ClusterRole | null | undefined;
    bindingName: string;
    bindingNamespace: string | null;
    selectedAccounts: ObservableHashSet<ServiceAccount>;
    selectedUsers: import("mobx").ObservableSet<string>;
    selectedGroups: import("mobx").ObservableSet<string>;
    get selectedBindings(): Subject[];
    get roleRefOptions(): SelectOption<Role | ClusterRole>[];
    get serviceAccountOptions(): SelectOption<ServiceAccount>[];
    onOpen: () => void;
    reset: () => void;
    createBindings: () => Promise<void>;
    renderContents(): JSX.Element;
    render(): JSX.Element;
}
export {};
