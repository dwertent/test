/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { PodStore } from "../+workloads-pods/store";
import type { Deployment, DeploymentApi } from "../../../common/k8s-api/endpoints";
import type { KubeObjectStoreOptions } from "../../../common/k8s-api/kube-object.store";
import { KubeObjectStore } from "../../../common/k8s-api/kube-object.store";
export declare type DeploymentStatuses = {
    running: number;
    failed: number;
    pending: number;
};
export interface DeploymentStoreDependencies {
    readonly podStore: PodStore;
}
export declare class DeploymentStore extends KubeObjectStore<Deployment, DeploymentApi> {
    protected readonly dependencies: DeploymentStoreDependencies;
    constructor(dependencies: DeploymentStoreDependencies, api: DeploymentApi, opts?: KubeObjectStoreOptions);
    protected sortItems(items: Deployment[]): Deployment[];
    getStatuses(deployments: Deployment[]): DeploymentStatuses;
    /**
     * @deprecated
     */
    getStatuses(deployments: Deployment[] | undefined): DeploymentStatuses;
    getChildPods(deployment: Deployment): import("../../../common/k8s-api/endpoints").Pod[];
}
