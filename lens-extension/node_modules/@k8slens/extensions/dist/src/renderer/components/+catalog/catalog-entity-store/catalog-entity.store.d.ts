/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { IComputedValue, IObservableValue } from "mobx";
import type { CatalogEntityRegistry } from "../../../api/catalog/entity/registry";
import type { CatalogEntity } from "../../../api/catalog-entity";
import type { CatalogCategory, CatalogCategoryRegistry } from "../../../../common/catalog";
import type { Disposer } from "../../../../common/utils";
import type { ItemListStore } from "../../item-object-list";
declare type EntityRegistry = Pick<CatalogEntityRegistry, "getItemsForCategory" | "filteredItems" | "onRun">;
declare type CatalogRegistry = Pick<CatalogCategoryRegistry, "items">;
interface Dependencies {
    entityRegistry: EntityRegistry;
    catalogRegistry: CatalogRegistry;
}
export declare type CatalogEntityStore = ItemListStore<CatalogEntity, false> & {
    readonly entities: IComputedValue<CatalogEntity[]>;
    readonly activeCategory: IObservableValue<CatalogCategory | undefined>;
    readonly selectedItemId: IObservableValue<string | undefined>;
    readonly selectedItem: IComputedValue<CatalogEntity | undefined>;
    watch(): Disposer;
    onRun(entity: CatalogEntity): void;
};
export declare function catalogEntityStore({ entityRegistry, catalogRegistry, }: Dependencies): CatalogEntityStore;
export {};
