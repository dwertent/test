/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { Disposer, ExtendableDisposer } from "../../../../common/utils";
import type { ExtensionLoader } from "../../../../extensions/extension-loader";
import type { LensExtensionId } from "../../../../extensions/lens-extension";
import type { InstallRequestValidated } from "./create-temp-files-and-validate/create-temp-files-and-validate";
import type { InstallRequest } from "./install-request";
import type { ExtensionInstallationStateStore } from "../../../../extensions/extension-installation-state-store/extension-installation-state-store";
interface Dependencies {
    extensionLoader: ExtensionLoader;
    uninstallExtension: (id: LensExtensionId) => Promise<boolean>;
    unpackExtension: (request: InstallRequestValidated, disposeDownloading: Disposer) => Promise<void>;
    createTempFilesAndValidate: (installRequest: InstallRequest) => Promise<InstallRequestValidated | null>;
    getExtensionDestFolder: (name: string) => string;
    extensionInstallationStateStore: ExtensionInstallationStateStore;
}
export declare const attemptInstall: ({ extensionLoader, uninstallExtension, unpackExtension, createTempFilesAndValidate, getExtensionDestFolder, extensionInstallationStateStore, }: Dependencies) => (request: InstallRequest, d?: ExtendableDisposer) => Promise<void>;
export {};
