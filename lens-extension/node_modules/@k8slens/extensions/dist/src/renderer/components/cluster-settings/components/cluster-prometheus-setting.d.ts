/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import React from "react";
import type { Cluster } from "../../../../common/cluster/cluster";
import type { SelectOption } from "../../select";
import type { MetricProviderInfo } from "../../../../common/k8s-api/endpoints/metrics.api";
export interface ClusterPrometheusSettingProps {
    cluster: Cluster;
}
declare const autoDetectPrometheus: unique symbol;
declare type ProviderValue = typeof autoDetectPrometheus | string;
export declare class ClusterPrometheusSetting extends React.Component<ClusterPrometheusSettingProps> {
    path: string;
    selectedOption: ProviderValue;
    loading: boolean;
    readonly loadedOptions: import("mobx").ObservableMap<string, MetricProviderInfo>;
    get options(): SelectOption<ProviderValue>[];
    constructor(props: ClusterPrometheusSettingProps);
    get canEditPrometheusPath(): boolean;
    componentDidMount(): void;
    parsePrometheusPath: () => {
        namespace: string;
        service: string;
        port: number;
        prefix: string;
    } | undefined;
    onSaveProvider: () => void;
    onSavePath: () => void;
    render(): JSX.Element;
}
export {};
