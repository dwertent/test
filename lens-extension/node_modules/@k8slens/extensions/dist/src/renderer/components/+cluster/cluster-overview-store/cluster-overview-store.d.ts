/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import { KubeObjectStore } from "../../../../common/k8s-api/kube-object.store";
import type { Cluster, ClusterApi } from "../../../../common/k8s-api/endpoints";
import { type ClusterMetricData } from "../../../../common/k8s-api/endpoints";
import type { StorageLayer } from "../../../utils";
import { type IMetricsReqParams } from "../../../../common/k8s-api/endpoints/metrics.api";
import type { NodeStore } from "../../+nodes/store";
export declare enum MetricType {
    MEMORY = "memory",
    CPU = "cpu"
}
export declare enum MetricNodeRole {
    MASTER = "master",
    WORKER = "worker"
}
export interface ClusterOverviewStorageState {
    metricType: MetricType;
    metricNodeRole: MetricNodeRole;
}
interface ClusterOverviewStoreDependencies {
    readonly storage: StorageLayer<ClusterOverviewStorageState>;
    readonly nodeStore: NodeStore;
}
export declare class ClusterOverviewStore extends KubeObjectStore<Cluster, ClusterApi> implements ClusterOverviewStorageState {
    protected readonly dependencies: ClusterOverviewStoreDependencies;
    metrics: Partial<ClusterMetricData>;
    metricsLoaded: boolean;
    get metricType(): MetricType;
    set metricType(value: MetricType);
    get metricNodeRole(): MetricNodeRole;
    set metricNodeRole(value: MetricNodeRole);
    constructor(dependencies: ClusterOverviewStoreDependencies, api: ClusterApi);
    private init;
    loadMetrics(params?: IMetricsReqParams): Promise<void>;
    getMetricsValues(source: Partial<ClusterMetricData>): [number, string][];
    resetMetrics(): void;
    reset(): void;
}
export {};
