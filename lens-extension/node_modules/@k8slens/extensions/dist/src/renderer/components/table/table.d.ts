/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import "./table.scss";
import React from "react";
import type { TableRowProps } from "./table-row";
export declare type TableSortBy = string;
export declare type TableOrderBy = "asc" | "desc";
export interface TableSortParams {
    sortBy: TableSortBy;
    orderBy: TableOrderBy;
}
export declare type TableSortCallback<Item> = (data: Item) => undefined | string | number | (string | number)[];
export declare type TableSortCallbacks<Item> = Record<string, TableSortCallback<Item>>;
export interface TableProps<Item> extends React.DOMAttributes<HTMLDivElement> {
    tableId?: string;
    items?: Item[];
    className?: string;
    autoSize?: boolean;
    selectable?: boolean;
    scrollable?: boolean;
    storageKey?: string;
    /**
     * Define sortable callbacks for every column in <TableHead><TableCell sortBy="someCol"><TableHead>
     * @sortItem argument in the callback is an object, provided in <TableRow sortItem={someColDataItem}/>
     */
    sortable?: TableSortCallbacks<Item>;
    sortSyncWithUrl?: boolean;
    sortByDefault?: Partial<TableSortParams>;
    onSort?: (params: TableSortParams) => void;
    noItems?: React.ReactNode;
    selectedItemId?: string;
    /**
     * Use virtual list component to render only visible rows. By default uses a
     * auto sizer to fill available height
     */
    virtual?: boolean;
    /**
     * Only used when virtual is true. Sets the virtual list to be a fixed height.
     * Needed when used in contexts that already have a parent component that
     * is `overflow-y: scroll`,
     */
    virtualHeight?: number;
    /**
     * Row padding in pixels
     */
    rowPadding?: number;
    /**
     * Row line height in pixels
     */
    rowLineHeight?: number;
    customRowHeights?: (item: Item, lineHeight: number, paddings: number) => number;
    getTableRow?: (uid: string) => React.ReactElement<TableRowProps<Item>> | undefined | null;
    renderRow?: (item: Item) => React.ReactElement<TableRowProps<Item>> | undefined | null;
}
export declare const Table: <Item>(props: TableProps<Item>) => React.ReactElement;
