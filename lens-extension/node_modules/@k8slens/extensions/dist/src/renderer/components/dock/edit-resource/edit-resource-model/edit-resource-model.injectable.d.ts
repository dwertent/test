import type { CallForResource } from "./call-for-resource/call-for-resource.injectable";
import type { EditingResource, EditResourceTabStore } from "../store";
import type { KubeObject } from "../../../../../common/k8s-api/kube-object";
import type { CallForPatchResource } from "./call-for-patch-resource/call-for-patch-resource.injectable";
import type { ShowNotification } from "../../../notifications";
declare const editResourceModelInjectable: import("@ogre-tools/injectable").Injectable<Promise<EditResourceModel>, unknown, string>;
export default editResourceModelInjectable;
interface Dependencies {
    callForResource: CallForResource;
    callForPatchResource: CallForPatchResource;
    waitForEditingResource: () => Promise<EditingResource>;
    showSuccessNotification: ShowNotification;
    showErrorNotification: ShowNotification;
    store: EditResourceTabStore;
    tabId: string;
}
export declare class EditResourceModel {
    private dependencies;
    constructor(dependencies: Dependencies);
    readonly configuration: {
        value: import("mobx").IComputedValue<string>;
        onChange: (value: string) => void;
        error: {
            value: import("mobx").IObservableValue<string>;
            onChange: (error: string) => void;
        };
    };
    private _resource;
    get shouldShowErrorAboutNoResource(): boolean;
    get resource(): KubeObject<import("../../../../../common/k8s-api/kube-object").KubeObjectMetadata<import("../../../../../common/k8s-api/kube-object").KubeObjectScope>, unknown, unknown>;
    get editingResource(): EditingResource;
    private get selfLink();
    load: () => Promise<void>;
    get namespace(): string;
    get name(): string;
    get kind(): string;
    save: () => Promise<void>;
}
