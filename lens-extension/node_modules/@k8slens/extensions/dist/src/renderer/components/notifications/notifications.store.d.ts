/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type React from "react";
import type { JsonApiErrorParsed } from "../../../common/k8s-api/json-api";
export declare type NotificationId = string | number;
export declare type NotificationMessage = string | React.ReactElement | React.ReactElement[] | JsonApiErrorParsed | Error;
export declare enum NotificationStatus {
    OK = "ok",
    ERROR = "error",
    INFO = "info"
}
export interface CreateNotificationOptions {
    id?: NotificationId;
    timeout?: number;
    onClose?(): void;
}
export interface Notification {
    id?: NotificationId;
    message: NotificationMessage;
    status?: NotificationStatus;
    timeout?: number;
    onClose?(): void;
}
export declare class NotificationsStore {
    notifications: import("mobx").IObservableArray<import("type-fest").Simplify<import("type-fest").Except<Notification, "id"> & Required<Pick<Notification, "id">>>>;
    protected autoHideTimers: Map<NotificationId, number>;
    constructor();
    getById(id: NotificationId): import("type-fest").Simplify<import("type-fest").Except<Notification, "id"> & Required<Pick<Notification, "id">>> | undefined;
    addAutoHideTimer(id: NotificationId): void;
    removeAutoHideTimer(id: NotificationId): void;
    add(rawNotification: Notification): () => void;
    remove(id: NotificationId): void;
}
