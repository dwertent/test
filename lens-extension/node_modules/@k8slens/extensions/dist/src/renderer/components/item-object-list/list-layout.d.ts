/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import "./item-list-layout.scss";
import type { ReactNode } from "react";
import React from "react";
import type { IComputedValue } from "mobx";
import type { ConfirmDialogParams } from "../confirm-dialog";
import type { TableCellProps, TableProps, TableRowProps, TableSortCallbacks } from "../table";
import type { IClassName, SingleOrMany, StorageLayer } from "../../utils";
import type { AddRemoveButtonsProps } from "../add-remove-buttons";
import type { ItemObject } from "../../../common/item.store";
import type { SearchInputUrlProps } from "../input";
import type { PageFiltersStore } from "./page-filters/store";
import type { SubscribableStore } from "../../kube-watch-api/kube-watch-api";
export declare type SearchFilter<I extends ItemObject> = (item: I) => SingleOrMany<string | number | undefined | null>;
export declare type SearchFilters<I extends ItemObject> = Record<string, SearchFilter<I>>;
export declare type ItemsFilter<I extends ItemObject> = (items: I[]) => I[];
export declare type ItemsFilters<I extends ItemObject> = Record<string, ItemsFilter<I>>;
export interface HeaderPlaceholders {
    title?: ReactNode;
    searchProps?: SearchInputUrlProps;
    filters?: ReactNode;
    info?: ReactNode;
}
export declare type ItemListStore<I extends ItemObject, PreLoadStores extends boolean> = {
    readonly isLoaded: boolean;
    readonly failedLoading: boolean;
    getTotalCount: () => number;
    isSelected: (item: I) => boolean;
    toggleSelection: (item: I) => void;
    isSelectedAll: (items: I[]) => boolean;
    toggleSelectionAll: (enabledItems: I[]) => void;
    pickOnlySelected: (items: I[]) => I[];
} & ({
    removeItems: (selectedItems: I[]) => Promise<void>;
    readonly selectedItems: I[];
    removeSelectedItems?: unknown;
} | {
    removeSelectedItems: () => Promise<void>;
    selectedItems?: unknown;
    removeItems?: unknown;
}) & (PreLoadStores extends true ? {
    loadAll: (selectedNamespaces: readonly string[]) => Promise<void>;
} : {
    loadAll?: unknown;
});
export declare type RenderHeaderTitle<Item extends ItemObject, PreLoadStores extends boolean> = ReactNode | ((parent: NonInjectedItemListLayout<Item, PreLoadStores>) => ReactNode);
export declare type HeaderCustomizer = (placeholders: HeaderPlaceholders) => HeaderPlaceholders;
export declare type ItemListLayoutProps<Item extends ItemObject, PreLoadStores extends boolean = boolean> = {
    tableId?: string;
    className: IClassName;
    getItems: () => Item[];
    store: ItemListStore<Item, PreLoadStores>;
    dependentStores?: SubscribableStore[];
    preloadStores?: boolean;
    hideFilters?: boolean;
    searchFilters?: SearchFilter<Item>[];
    /** @deprecated */
    filterItems?: ItemsFilter<Item>[];
    showHeader?: boolean;
    headerClassName?: IClassName;
    renderHeaderTitle?: RenderHeaderTitle<Item, PreLoadStores>;
    customizeHeader?: HeaderCustomizer | HeaderCustomizer[];
    isReady?: boolean;
    isSelectable?: boolean;
    isConfigurable?: boolean;
    copyClassNameFromHeadCells?: boolean;
    sortingCallbacks?: TableSortCallbacks<Item>;
    tableProps?: Partial<TableProps<Item>>;
    renderTableHeader?: (TableCellProps | undefined | null)[];
    renderTableContents: (item: Item) => (ReactNode | TableCellProps)[];
    renderItemMenu?: (item: Item, store: ItemListStore<Item, PreLoadStores>) => ReactNode;
    customizeTableRowProps?: (item: Item) => Partial<TableRowProps<Item>>;
    addRemoveButtons?: Partial<AddRemoveButtonsProps>;
    virtual?: boolean;
    hasDetailsView?: boolean;
    detailsItem?: Item;
    onDetails?: (item: Item) => void;
    customizeRemoveDialog?: (selectedItems: Item[]) => Partial<ConfirmDialogParams>;
    renderFooter?: (parent: NonInjectedItemListLayout<Item, PreLoadStores>) => React.ReactNode;
    spinnerTestId?: string;
    /**
     * Message to display when a store failed to load
     *
     * @default "Failed to load items"
     */
    failedToLoadMessage?: React.ReactNode;
    filterCallbacks?: ItemsFilters<Item>;
} & (PreLoadStores extends true ? {
    preloadStores?: true;
} : {
    preloadStores: false;
});
export interface ItemListLayoutStorage {
    showFilters: boolean;
}
interface Dependencies {
    selectedFilterNamespaces: IComputedValue<string[]>;
    itemListLayoutStorage: StorageLayer<ItemListLayoutStorage>;
    pageFiltersStore: PageFiltersStore;
}
declare class NonInjectedItemListLayout<I extends ItemObject, PreLoadStores extends boolean> extends React.Component<ItemListLayoutProps<I, PreLoadStores> & Dependencies> {
    static defaultProps: object;
    constructor(props: ItemListLayoutProps<I, PreLoadStores> & Dependencies);
    componentDidMount(): Promise<void>;
    get showFilters(): boolean;
    set showFilters(showFilters: boolean);
    get filters(): import("./page-filters/store").Filter[];
    toggleFilters(): void;
    get isReady(): boolean | NonNullable<({
        tableId?: string | undefined;
        className: IClassName;
        getItems: () => I[];
        store: ItemListStore<I, PreLoadStores>;
        dependentStores?: SubscribableStore[] | undefined;
        preloadStores?: boolean | undefined;
        hideFilters?: boolean | undefined;
        searchFilters?: SearchFilter<I>[] | undefined;
        /** @deprecated */
        filterItems?: ItemsFilter<I>[] | undefined;
        showHeader?: boolean | undefined;
        headerClassName?: IClassName;
        renderHeaderTitle?: RenderHeaderTitle<I, PreLoadStores>;
        customizeHeader?: HeaderCustomizer | HeaderCustomizer[] | undefined;
        isReady?: boolean | undefined;
        isSelectable?: boolean | undefined;
        isConfigurable?: boolean | undefined;
        copyClassNameFromHeadCells?: boolean | undefined;
        sortingCallbacks?: TableSortCallbacks<I> | undefined;
        tableProps?: Partial<TableProps<I>> | undefined;
        renderTableHeader?: (TableCellProps | null | undefined)[] | undefined;
        renderTableContents: (item: I) => (ReactNode | TableCellProps)[];
        renderItemMenu?: ((item: I, store: ItemListStore<I, PreLoadStores>) => ReactNode) | undefined;
        customizeTableRowProps?: ((item: I) => Partial<TableRowProps<I>>) | undefined;
        addRemoveButtons?: Partial<AddRemoveButtonsProps> | undefined;
        virtual?: boolean | undefined;
        hasDetailsView?: boolean | undefined;
        detailsItem?: I | undefined;
        onDetails?: ((item: I) => void) | undefined;
        customizeRemoveDialog?: ((selectedItems: I[]) => Partial<ConfirmDialogParams>) | undefined;
        renderFooter?: ((parent: NonInjectedItemListLayout<I, PreLoadStores>) => ReactNode) | undefined;
        spinnerTestId?: string | undefined;
        /**
         * Message to display when a store failed to load
         *
         * @default "Failed to load items"
         */
        failedToLoadMessage?: ReactNode;
        filterCallbacks?: ItemsFilters<I> | undefined;
    } & (PreLoadStores extends true ? {
        preloadStores?: true | undefined;
    } : {
        preloadStores: false;
    }) & Dependencies)["isReady"]>;
    renderFilters(): JSX.Element | null;
    private filterCallbacks;
    get items(): I[];
    render(): JSX.Element;
}
export declare const ItemListLayout: <I extends ItemObject, PreLoadStores extends boolean = true>(props: ItemListLayoutProps<I, PreLoadStores>) => React.ReactElement;
export {};
