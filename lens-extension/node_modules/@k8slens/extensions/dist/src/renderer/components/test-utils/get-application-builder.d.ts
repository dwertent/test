/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { LensRendererExtension } from "../../../extensions/lens-renderer-extension";
import type { RenderResult } from "@testing-library/react";
import type { KubeResource } from "../../../common/rbac";
import type { DiContainer } from "@ogre-tools/injectable";
import type { MenuItemOpts } from "../../../main/menu/application-menu-items.injectable";
import type { MenuItemConstructorOptions } from "electron";
import type { NavigateToHelmCharts } from "../../../common/front-end-routing/routes/cluster/helm/charts/navigate-to-helm-charts.injectable";
import type { MinimalTrayMenuItem } from "../../../main/tray/electron-tray/electron-tray.injectable";
import type { Route } from "../../../common/front-end-routing/front-end-route-injection-token";
import type { NavigateToRouteOptions } from "../../../common/front-end-routing/navigate-to-route-injection-token";
import type { LensMainExtension } from "../../../extensions/lens-main-extension";
declare type Callback = (dis: DiContainers) => void | Promise<void>;
declare type EnableExtensions<T> = (...extensions: T[]) => void;
declare type DisableExtensions<T> = (...extensions: T[]) => void;
export interface ApplicationBuilder {
    dis: DiContainers;
    setEnvironmentToClusterFrame: () => ApplicationBuilder;
    extensions: {
        renderer: {
            enable: EnableExtensions<LensRendererExtension>;
            disable: DisableExtensions<LensRendererExtension>;
        };
        main: {
            enable: EnableExtensions<LensMainExtension>;
            disable: DisableExtensions<LensMainExtension>;
        };
        enable: (...extensions: {
            renderer: LensRendererExtension;
            main: LensMainExtension;
        }[]) => void;
        disable: (...extensions: {
            renderer: LensRendererExtension;
            main: LensMainExtension;
        }[]) => void;
    };
    allowKubeResource: (resourceName: KubeResource) => ApplicationBuilder;
    beforeApplicationStart: (callback: Callback) => ApplicationBuilder;
    beforeRender: (callback: Callback) => ApplicationBuilder;
    render: () => Promise<RenderResult>;
    tray: {
        click: (id: string) => Promise<void>;
        get: (id: string) => MinimalTrayMenuItem | null;
        getIconPath: () => string;
    };
    applicationMenu: {
        click: (path: string) => void;
    };
    preferences: {
        close: () => void;
        navigate: () => void;
        navigateTo: (route: Route<any>, params: Partial<NavigateToRouteOptions<any>>) => void;
        navigation: {
            click: (id: string) => void;
        };
    };
    helmCharts: {
        navigate: NavigateToHelmCharts;
    };
    select: {
        openMenu: (id: string) => ({
            selectOption: (labelText: string) => void;
        });
        selectOption: (menuId: string, labelText: string) => void;
        getValue: (menuId: string) => string;
    };
}
interface DiContainers {
    rendererDi: DiContainer;
    mainDi: DiContainer;
}
export declare const getApplicationBuilder: () => ApplicationBuilder;
export declare type ToFlatChildren = (opts: MenuItemConstructorOptions) => (MenuItemOpts & {
    path: string;
})[];
export {};
