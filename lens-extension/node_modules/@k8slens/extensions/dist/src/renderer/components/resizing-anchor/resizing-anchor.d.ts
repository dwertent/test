/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import "./resizing-anchor.scss";
import React from "react";
import _ from "lodash";
import { noop } from "../../utils";
export declare enum ResizeDirection {
    HORIZONTAL = "horizontal",
    VERTICAL = "vertical"
}
/**
 * ResizeSide is for customizing where the area should be rendered.
 * That location is determined in conjunction with the `ResizeDirection` using the following table:
 *
 * +----------+------------+----------+
 * |          | HORIZONTAL | VERTICAL |
 * +----------+------------+----------+
 * |  LEADING | left       | top      |
 * +----------+------------+----------+
 * | TRAILING | right      | bottom   |
 * +----------+------------+----------+
 */
export declare enum ResizeSide {
    LEADING = "leading",
    TRAILING = "trailing"
}
/**
 * ResizeGrowthDirection determines how the anchor interprets the drag.
 *
 * Because the origin of the screen is top left a drag from bottom to top
 * results in a negative directional delta. However, if the component being
 * dragged grows in the opposite direction, this needs to be compensated for.
 */
export declare enum ResizeGrowthDirection {
    TOP_TO_BOTTOM = 1,
    BOTTOM_TO_TOP = -1,
    LEFT_TO_RIGHT = 1,
    RIGHT_TO_LEFT = -1
}
export interface ResizingAnchorProps {
    direction: ResizeDirection;
    /**
     * getCurrentExtent should return the current prominent dimension in the
     * given resizing direction. Width for HORIZONTAL and height for VERTICAL
     */
    getCurrentExtent: () => number;
    disabled?: boolean;
    placement: ResizeSide;
    growthDirection: ResizeGrowthDirection;
    onlyButtons?: number;
    onStart: () => void;
    onEnd: () => void;
    /**
     * onDrag is called whenever there is a mousemove event. All calls will be
     * bounded by matching `onStart` and `onEnd` calls.
     */
    onDrag: (newExtent: number) => void;
    onDoubleClick?: () => void;
    /**
     * The following two extents represent the max and min values set to `onDrag`
     */
    maxExtent: number;
    minExtent: number;
    /**
     * The following events are triggered with respect to the above values.
     *  - The "__Exceed" call will be made when the unbounded extent goes from
     *    < the above to >= the above
     *  - The "__Subceed" call is similar but is triggered when the unbounded
     *    extent goes from >= the above to < the above.
     */
    onMaxExtentExceed?: () => void;
    onMaxExtentSubceed?: () => void;
    onMinExtentSubceed?: () => void;
    onMinExtentExceed?: () => void;
}
interface Position {
    readonly pageX: number;
    readonly pageY: number;
}
export declare class ResizingAnchor extends React.PureComponent<ResizingAnchorProps> {
    lastMouseEvent?: MouseEvent;
    ref: React.RefObject<HTMLDivElement>;
    isDragging: boolean;
    wasDragging: boolean;
    static defaultProps: {
        onStart: typeof noop;
        onDrag: typeof noop;
        onEnd: typeof noop;
        onMaxExtentExceed: typeof noop;
        onMinExtentExceed: typeof noop;
        onMinExtentSubceed: typeof noop;
        onMaxExtentSubceed: typeof noop;
        onDoubleClick: typeof noop;
        disabled: boolean;
        growthDirection: ResizeGrowthDirection;
        maxExtent: number;
        minExtent: number;
        placement: ResizeSide;
    };
    static IS_RESIZING: string;
    constructor(props: ResizingAnchorProps);
    componentWillUnmount(): void;
    onDragInit: (event: React.MouseEvent) => void;
    calculateDelta(from: Position, to: Position): number | false;
    onDrag: _.DebouncedFunc<(event: MouseEvent) => void>;
    onDragEnd: () => void;
    render(): JSX.Element;
}
export {};
