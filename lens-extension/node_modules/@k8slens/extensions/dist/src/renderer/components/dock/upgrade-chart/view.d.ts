/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import "./upgrade-chart.scss";
import React from "react";
import type { DockTab } from "../dock/store";
import type { UpgradeChartTabStore } from "./store";
import { type ChartVersion } from "../../+helm-charts/helm-chart.store";
import type { HelmRelease } from "../../../../common/k8s-api/endpoints/helm-releases.api";
import type { IAsyncComputed } from "@ogre-tools/injectable-react";
import type { CallForHelmReleaseUpdate } from "../../+helm-releases/update-release/call-for-helm-release-update/call-for-helm-release-update.injectable";
export interface UpgradeChartProps {
    className?: string;
    tab: DockTab;
}
interface Dependencies {
    releases: IAsyncComputed<HelmRelease[]>;
    upgradeChartTabStore: UpgradeChartTabStore;
    updateRelease: CallForHelmReleaseUpdate;
}
export declare class NonInjectedUpgradeChart extends React.Component<UpgradeChartProps & Dependencies> {
    error?: string;
    versions: import("mobx").IObservableArray<ChartVersion>;
    version: ChartVersion | undefined;
    constructor(props: UpgradeChartProps & Dependencies);
    componentDidMount(): void;
    get tabId(): string;
    get release(): HelmRelease | null | undefined;
    get value(): string | undefined;
    reloadValues(): Promise<void>;
    reloadVersions(release: HelmRelease | null | undefined): Promise<void>;
    onChange: (value: string) => void;
    onError: (error: Error | string) => void;
    upgrade: () => Promise<JSX.Element | null>;
    render(): JSX.Element;
}
export declare const UpgradeChart: React.FunctionComponent<UpgradeChartProps>;
export {};
