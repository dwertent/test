/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { Draft } from "immer";
export interface StorageChange<T> {
    key: string;
    value: T | undefined;
    oldValue: T | undefined;
}
export interface StorageAdapter<T> {
    [metadata: string]: unknown;
    getItem(key: string): T | Promise<T>;
    setItem(key: string, value: T): void;
    removeItem(key: string): void;
    onChange?(change: StorageChange<T>): void;
}
export interface StorageHelperOptions<T> {
    autoInit?: boolean;
    storage: StorageAdapter<T>;
    defaultValue: T;
}
export interface StorageLayer<T> {
    isDefaultValue(val: T): boolean;
    get(): T;
    readonly value: T;
    readonly whenReady: Promise<void>;
    set(value: T): void;
    reset(): void;
    merge(value: Partial<T> | ((draft: Draft<T>) => Partial<T> | void)): void;
}
export declare class StorageHelper<T> implements StorageLayer<T> {
    readonly key: string;
    private options;
    static logPrefix: string;
    readonly storage: StorageAdapter<T>;
    private data;
    initialized: boolean;
    get whenReady(): Promise<void> & {
        cancel(): void;
    };
    get defaultValue(): T;
    constructor(key: string, options: StorageHelperOptions<T>);
    private onData;
    private onError;
    init({ force }?: {
        force?: boolean | undefined;
    }): void;
    isDefaultValue(value: T): boolean;
    protected onChange(value: T | undefined, oldValue: T | undefined): void;
    get(): T;
    get value(): T;
    set(value: T): void;
    reset(): void;
    merge(value: Partial<T> | ((draft: Draft<T>) => Partial<T> | void)): void;
}
