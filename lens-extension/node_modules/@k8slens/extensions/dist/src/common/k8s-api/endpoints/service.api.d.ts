/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
export interface ServicePort {
    name?: string;
    protocol: string;
    port: number;
    targetPort: number;
    nodePort?: number;
}
export declare class ServicePort {
    constructor(data: ServicePort);
    toString(): string;
}
export interface ServiceSpec {
    type: string;
    clusterIP: string;
    clusterIPs?: string[];
    externalTrafficPolicy?: string;
    externalName?: string;
    loadBalancerIP?: string;
    loadBalancerSourceRanges?: string[];
    sessionAffinity: string;
    selector: Partial<Record<string, string>>;
    ports: ServicePort[];
    healthCheckNodePort?: number;
    externalIPs?: string[];
    topologyKeys?: string[];
    ipFamilies?: string[];
    ipFamilyPolicy?: string;
    allocateLoadBalancerNodePorts?: boolean;
    loadBalancerClass?: string;
    internalTrafficPolicy?: string;
}
export interface ServiceStatus {
    loadBalancer?: {
        ingress?: {
            ip?: string;
            hostname?: string;
        }[];
    };
}
export declare class Service extends KubeObject<NamespaceScopedMetadata, ServiceStatus, ServiceSpec> {
    static readonly kind = "Service";
    static readonly namespaced = true;
    static readonly apiBase = "/api/v1/services";
    getClusterIp(): string;
    getClusterIps(): string[];
    getExternalIps(): (string | undefined)[];
    getType(): string;
    getSelector(): string[];
    getPorts(): ServicePort[];
    getLoadBalancer(): {
        ingress?: {
            ip?: string | undefined;
            hostname?: string | undefined;
        }[] | undefined;
    } | undefined;
    isActive(): boolean;
    getStatus(): "Active" | "Pending";
    getIpFamilies(): string[];
    getIpFamilyPolicy(): string;
}
export declare class ServiceApi extends KubeApi<Service> {
    constructor(opts?: DerivedKubeApiOptions);
}
