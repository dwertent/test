/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { KubeObjectMetadata, KubeObjectScope, NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { KubeJsonApiData } from "../kube-json-api";
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
export declare enum SecretType {
    Opaque = "Opaque",
    ServiceAccountToken = "kubernetes.io/service-account-token",
    Dockercfg = "kubernetes.io/dockercfg",
    DockerConfigJson = "kubernetes.io/dockerconfigjson",
    BasicAuth = "kubernetes.io/basic-auth",
    SSHAuth = "kubernetes.io/ssh-auth",
    TLS = "kubernetes.io/tls",
    BootstrapToken = "bootstrap.kubernetes.io/token"
}
export declare const reverseSecretTypeMap: {
    Opaque: string;
    "kubernetes.io/service-account-token": string;
    "kubernetes.io/dockercfg": string;
    "kubernetes.io/dockerconfigjson": string;
    "kubernetes.io/basic-auth": string;
    "kubernetes.io/ssh-auth": string;
    "kubernetes.io/tls": string;
    "bootstrap.kubernetes.io/token": string;
};
export interface SecretReference {
    name: string;
    namespace?: string;
}
export interface SecretData extends KubeJsonApiData<KubeObjectMetadata<KubeObjectScope.Namespace>, void, void> {
    type: SecretType;
    data?: Partial<Record<string, string>>;
}
export declare class Secret extends KubeObject<NamespaceScopedMetadata, void, void> {
    static readonly kind = "Secret";
    static readonly namespaced = true;
    static readonly apiBase = "/api/v1/secrets";
    type: SecretType;
    data: Partial<Record<string, string>>;
    constructor({ data, type, ...rest }: SecretData);
    getKeys(): string[];
    getToken(): string | undefined;
}
export declare class SecretApi extends KubeApi<Secret, SecretData> {
    constructor(options?: DerivedKubeApiOptions);
}
