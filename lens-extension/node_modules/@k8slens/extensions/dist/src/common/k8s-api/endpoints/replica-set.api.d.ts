/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { PodMetricData } from "./pod.api";
import type { KubeObjectStatus, LabelSelector, NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { PodTemplateSpec } from "./types/pod-template-spec";
export declare class ReplicaSetApi extends KubeApi<ReplicaSet> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
    protected getScaleApiUrl(params: {
        namespace: string;
        name: string;
    }): string;
    getReplicas(params: {
        namespace: string;
        name: string;
    }): Promise<number>;
    scale(params: {
        namespace: string;
        name: string;
    }, replicas: number): Promise<import("../kube-json-api").KubeJsonApiData<import("../kube-object").KubeJsonApiObjectMetadata<import("../kube-object").KubeObjectScope>, unknown, unknown>>;
}
export declare function getMetricsForReplicaSets(replicasets: ReplicaSet[], namespace: string, selector?: string): Promise<PodMetricData>;
export interface ReplicaSetSpec {
    replicas?: number;
    selector: LabelSelector;
    template?: PodTemplateSpec;
    minReadySeconds?: number;
}
export interface ReplicaSetStatus extends KubeObjectStatus {
    replicas: number;
    fullyLabeledReplicas?: number;
    readyReplicas?: number;
    availableReplicas?: number;
    observedGeneration?: number;
}
export declare class ReplicaSet extends KubeObject<NamespaceScopedMetadata, ReplicaSetStatus, ReplicaSetSpec> {
    static kind: string;
    static namespaced: boolean;
    static apiBase: string;
    getSelectors(): string[];
    getNodeSelectors(): string[];
    getTemplateLabels(): string[];
    getTolerations(): import("../kube-object").Toleration[];
    getAffinity(): import("../kube-object").Affinity | undefined;
    getAffinityNumber(): number;
    getDesired(): number;
    getCurrent(): number;
    getReady(): number;
    getImages(): string[];
}
