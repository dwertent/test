/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { IMetricsQuery } from "../../../main/routes/metrics/metrics-query";
export interface MetricData {
    status: string;
    data: {
        resultType: string;
        result: MetricResult[];
    };
}
export interface MetricResult {
    metric: {
        [name: string]: string | undefined;
        instance?: string;
        node?: string;
        pod?: string;
        kubernetes?: string;
        kubernetes_node?: string;
        kubernetes_namespace?: string;
    };
    values: [number, string][];
}
export interface MetricProviderInfo {
    name: string;
    id: string;
    isConfigurable: boolean;
}
export interface IMetricsReqParams {
    start?: number | string;
    end?: number | string;
    step?: number;
    range?: number;
    namespace?: string;
}
export interface IResourceMetrics<T extends MetricData> {
    [metric: string]: T;
    cpuUsage: T;
    memoryUsage: T;
    fsUsage: T;
    fsWrites: T;
    fsReads: T;
    networkReceive: T;
    networkTransmit: T;
}
export declare const metricsApi: {
    getMetrics<T = IMetricsQuery>(query: T, reqParams?: IMetricsReqParams): Promise<T extends object ? T extends infer T_1 ? { [K in keyof T_1]: MetricData; } : never : MetricData>;
    getMetricProviders(): Promise<MetricProviderInfo[]>;
};
export declare function normalizeMetrics(metrics: MetricData | undefined | null, frames?: number): MetricData;
export declare function isMetricsEmpty(metrics: Partial<Record<string, MetricData>>): boolean;
export declare function getItemMetrics(metrics: Partial<Record<string, MetricData>> | null | undefined, itemName: string): Partial<Record<string, MetricData>> | undefined;
export declare function getMetricLastPoints<T extends Partial<Record<string, MetricData>>>(metrics: T): Record<keyof T, number>;
