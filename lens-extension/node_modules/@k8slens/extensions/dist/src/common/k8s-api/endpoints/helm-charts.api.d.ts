/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { RequestInit } from "node-fetch";
export declare type RepoHelmChartList = Record<string, RawHelmChart[]>;
export interface IHelmChartDetails {
    readme: string;
    versions: HelmChart[];
}
/**
 * Get a list of all helm charts from all saved helm repos
 */
export declare function listCharts(): Promise<HelmChart[]>;
export interface GetChartDetailsOptions {
    version?: string;
    reqInit?: RequestInit;
}
/**
 * Get the readme and all versions of a chart
 * @param repo The repo to get from
 * @param name The name of the chart to request the data of
 * @param options.version The version of the chart's readme to get, default latest
 * @param options.reqInit A way for passing in an abort controller or other browser request options
 */
export declare function getChartDetails(repo: string, name: string, { version, reqInit }?: GetChartDetailsOptions): Promise<IHelmChartDetails>;
/**
 * Get chart values related to a specific repos' version of a chart
 * @param repo The repo to get from
 * @param name The name of the chart to request the data of
 * @param version The version to get the values from
 */
export declare function getChartValues(repo: string, name: string, version: string): Promise<string>;
export interface RawHelmChart {
    apiVersion: string;
    name: string;
    version: string;
    repo: string;
    created: string;
    digest?: string;
    kubeVersion?: string;
    description?: string;
    home?: string;
    engine?: string;
    icon?: string;
    appVersion?: string;
    type?: string;
    tillerVersion?: string;
    deprecated?: boolean;
    keywords?: string[];
    sources?: string[];
    urls?: string[];
    maintainers?: HelmChartMaintainer[];
    dependencies?: RawHelmChartDependency[];
    annotations?: Record<string, string>;
}
export interface HelmChartCreateOpts {
    onError?: "throw" | "log";
}
export interface HelmChartMaintainer {
    name: string;
    email: string;
    url?: string;
}
export interface RawHelmChartDependency {
    name: string;
    repository: string;
    condition?: string;
    version: string;
    tags?: string[];
}
export declare type HelmChartDependency = Required<Omit<RawHelmChartDependency, "condition">> & Pick<RawHelmChartDependency, "condition">;
export interface HelmChartData {
    apiVersion: string;
    name: string;
    version: string;
    repo: string;
    created: string;
    description: string;
    keywords: string[];
    sources: string[];
    urls: string[];
    annotations: Record<string, string>;
    dependencies: HelmChartDependency[];
    maintainers: HelmChartMaintainer[];
    deprecated: boolean;
    kubeVersion?: string;
    digest?: string;
    home?: string;
    engine?: string;
    icon?: string;
    appVersion?: string;
    type?: string;
    tillerVersion?: string;
}
export declare class HelmChart implements HelmChartData {
    apiVersion: string;
    name: string;
    version: string;
    repo: string;
    created: string;
    description: string;
    keywords: string[];
    sources: string[];
    urls: string[];
    annotations: Record<string, string>;
    dependencies: HelmChartDependency[];
    maintainers: HelmChartMaintainer[];
    deprecated: boolean;
    kubeVersion?: string;
    digest?: string;
    home?: string;
    engine?: string;
    icon?: string;
    appVersion?: string;
    type?: string;
    tillerVersion?: string;
    private constructor();
    static create(data: RawHelmChart): HelmChart;
    static create(data: RawHelmChart, opts?: HelmChartCreateOpts): HelmChart | undefined;
    getId(): string;
    getName(): string;
    getFullName(seperator?: string): string;
    getDescription(): string;
    getIcon(): string | undefined;
    getHome(): string | undefined;
    getMaintainers(): HelmChartMaintainer[];
    getVersion(): string;
    getRepository(): string;
    getAppVersion(): string | undefined;
    getKeywords(): string[];
}
