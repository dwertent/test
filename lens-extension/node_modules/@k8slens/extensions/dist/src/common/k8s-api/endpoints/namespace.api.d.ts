/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { ClusterScopedMetadata, KubeObjectStatus } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { PodMetricData } from "./pod.api";
export declare enum NamespaceStatusKind {
    ACTIVE = "Active",
    TERMINATING = "Terminating"
}
export interface NamespaceSpec {
    finalizers?: string[];
}
export interface NamespaceStatus extends KubeObjectStatus {
    phase?: string;
}
export declare class Namespace extends KubeObject<ClusterScopedMetadata, NamespaceStatus, NamespaceSpec> {
    static readonly kind = "Namespace";
    static readonly namespaced = false;
    static readonly apiBase = "/api/v1/namespaces";
    getStatus(): string;
}
export declare class NamespaceApi extends KubeApi<Namespace> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
}
export declare function getMetricsForNamespace(namespace: string, selector?: string): Promise<PodMetricData>;
