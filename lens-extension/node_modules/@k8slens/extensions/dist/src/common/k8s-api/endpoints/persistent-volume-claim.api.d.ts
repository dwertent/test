/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { LabelSelector, NamespaceScopedMetadata, TypedLocalObjectReference } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { MetricData } from "./metrics.api";
import type { Pod } from "./pod.api";
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { ResourceRequirements } from "./types/resource-requirements";
export declare class PersistentVolumeClaimApi extends KubeApi<PersistentVolumeClaim> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
}
export declare function getMetricsForPvc(pvc: PersistentVolumeClaim): Promise<PersistentVolumeClaimMetricData>;
export interface PersistentVolumeClaimMetricData extends Partial<Record<string, MetricData>> {
    diskUsage: MetricData;
    diskCapacity: MetricData;
}
export interface PersistentVolumeClaimSpec {
    accessModes?: string[];
    dataSource?: TypedLocalObjectReference;
    dataSourceRef?: TypedLocalObjectReference;
    resources?: ResourceRequirements;
    selector?: LabelSelector;
    storageClassName?: string;
    volumeMode?: string;
    volumeName?: string;
}
export interface PersistentVolumeClaimStatus {
    phase: string;
}
export declare class PersistentVolumeClaim extends KubeObject<NamespaceScopedMetadata, PersistentVolumeClaimStatus, PersistentVolumeClaimSpec> {
    static readonly kind = "PersistentVolumeClaim";
    static readonly namespaced = true;
    static readonly apiBase = "/api/v1/persistentvolumeclaims";
    getPods(pods: Pod[]): Pod[];
    getStorage(): string;
    getMatchLabels(): string[];
    getMatchExpressions(): import("../kube-object").LabelMatchExpression[];
    getStatus(): string;
}
