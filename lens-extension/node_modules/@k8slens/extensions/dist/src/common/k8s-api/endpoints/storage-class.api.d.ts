/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { ClusterScopedMetadata, KubeObjectMetadata, KubeObjectScope } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { KubeJsonApiData } from "../kube-json-api";
export interface TopologySelectorLabelRequirement {
    key: string;
    values: string[];
}
export interface TopologySelectorTerm {
    matchLabelExpressions?: TopologySelectorLabelRequirement[];
}
export interface StorageClassData extends KubeJsonApiData<KubeObjectMetadata<KubeObjectScope.Cluster>, void, void> {
    allowVolumeExpansion?: boolean;
    allowedTopologies?: TopologySelectorTerm[];
    mountOptions?: string[];
    parameters?: Partial<Record<string, string>>;
    provisioner: string;
    reclaimPolicy?: string;
    volumeBindingMode?: string;
}
export declare class StorageClass extends KubeObject<ClusterScopedMetadata, void, void> {
    static readonly kind = "StorageClass";
    static readonly namespaced = false;
    static readonly apiBase = "/apis/storage.k8s.io/v1/storageclasses";
    allowVolumeExpansion?: boolean;
    allowedTopologies: TopologySelectorTerm[];
    mountOptions: string[];
    parameters: Partial<Record<string, string>>;
    provisioner: string;
    reclaimPolicy: string;
    volumeBindingMode?: string;
    constructor({ allowVolumeExpansion, allowedTopologies, mountOptions, parameters, provisioner, reclaimPolicy, volumeBindingMode, ...rest }: StorageClassData);
    isDefault(): boolean;
    getVolumeBindingMode(): string;
    getReclaimPolicy(): string;
}
export declare class StorageClassApi extends KubeApi<StorageClass, StorageClassData> {
    constructor(opts?: DerivedKubeApiOptions);
}
