/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { BaseKubeObjectCondition, ClusterScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { MetricData } from "./metrics.api";
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
export declare class NodeApi extends KubeApi<Node> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
}
export declare function getMetricsForAllNodes(): Promise<NodeMetricData>;
export interface NodeMetricData extends Partial<Record<string, MetricData>> {
    memoryUsage: MetricData;
    workloadMemoryUsage: MetricData;
    memoryCapacity: MetricData;
    memoryAllocatableCapacity: MetricData;
    cpuUsage: MetricData;
    cpuCapacity: MetricData;
    fsUsage: MetricData;
    fsSize: MetricData;
}
export interface NodeTaint {
    key: string;
    value?: string;
    effect: string;
    timeAdded: string;
}
export declare function formatNodeTaint(taint: NodeTaint): string;
export interface NodeCondition extends BaseKubeObjectCondition {
    /**
     * Last time we got an update on a given condition.
     */
    lastHeartbeatTime?: string;
}
export interface NodeSpec {
    podCIDR?: string;
    podCIDRs?: string[];
    providerID?: string;
    /**
     * @deprecated see https://issues.k8s.io/61966
     */
    externalID?: string;
    taints?: NodeTaint[];
    unschedulable?: boolean;
}
export interface NodeAddress {
    type: "Hostname" | "ExternalIP" | "InternalIP";
    address: string;
}
export interface NodeStatusResources extends Partial<Record<string, string>> {
    cpu?: string;
    "ephemeral-storage"?: string;
    "hugepages-1Gi"?: string;
    "hugepages-2Mi"?: string;
    memory?: string;
    pods?: string;
}
export interface ConfigMapNodeConfigSource {
    kubeletConfigKey: string;
    name: string;
    namespace: string;
    resourceVersion?: string;
    uid?: string;
}
export interface NodeConfigSource {
    configMap?: ConfigMapNodeConfigSource;
}
export interface NodeConfigStatus {
    active?: NodeConfigSource;
    assigned?: NodeConfigSource;
    lastKnownGood?: NodeConfigSource;
    error?: string;
}
export interface DaemonEndpoint {
    Port: number;
}
export interface NodeDaemonEndpoints {
    kubeletEndpoint?: DaemonEndpoint;
}
export interface ContainerImage {
    names?: string[];
    sizeBytes?: number;
}
export interface NodeSystemInfo {
    architecture: string;
    bootID: string;
    containerRuntimeVersion: string;
    kernelVersion: string;
    kubeProxyVersion: string;
    kubeletVersion: string;
    machineID: string;
    operatingSystem: string;
    osImage: string;
    systemUUID: string;
}
export interface AttachedVolume {
    name: string;
    devicePath: string;
}
export interface NodeStatus {
    capacity?: NodeStatusResources;
    allocatable?: NodeStatusResources;
    conditions?: NodeCondition[];
    addresses?: NodeAddress[];
    config?: NodeConfigStatus;
    daemonEndpoints?: NodeDaemonEndpoints;
    images?: ContainerImage[];
    nodeInfo?: NodeSystemInfo;
    phase?: string;
    volumesInUse?: string[];
    volumesAttached?: AttachedVolume[];
}
export declare class Node extends KubeObject<ClusterScopedMetadata, NodeStatus, NodeSpec> {
    static readonly kind = "Node";
    static readonly namespaced = false;
    static readonly apiBase = "/api/v1/nodes";
    /**
     * Returns the concatination of all current condition types which have a status
     * of `"True"`
     */
    getNodeConditionText(): string;
    getTaints(): NodeTaint[];
    isMasterNode(): boolean;
    getRoleLabelItems(): string[];
    getRoleLabels(): string;
    getCpuCapacity(): number;
    getMemoryCapacity(): number;
    getConditions(): NodeCondition[];
    getActiveConditions(): NodeCondition[];
    getWarningConditions(): NodeCondition[];
    getKubeletVersion(): string;
    getOperatingSystem(): string;
    isUnschedulable(): boolean | undefined;
}
