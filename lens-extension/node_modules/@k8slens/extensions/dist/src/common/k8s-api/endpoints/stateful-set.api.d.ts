/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { PodMetricData } from "./pod.api";
import type { LabelSelector, NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { PodTemplateSpec } from "./types/pod-template-spec";
import type { PersistentVolumeClaimTemplateSpec } from "./types/persistent-volume-claim-template-spec";
export declare class StatefulSetApi extends KubeApi<StatefulSet> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
    protected getScaleApiUrl(params: {
        namespace: string;
        name: string;
    }): string;
    getReplicas(params: {
        namespace: string;
        name: string;
    }): Promise<number>;
    scale(params: {
        namespace: string;
        name: string;
    }, replicas: number): Promise<import("../kube-json-api").KubeJsonApiData<import("../kube-object").KubeJsonApiObjectMetadata<import("../kube-object").KubeObjectScope>, unknown, unknown>>;
}
export declare function getMetricsForStatefulSets(statefulSets: StatefulSet[], namespace: string, selector?: string): Promise<PodMetricData>;
export interface StatefulSetSpec {
    serviceName: string;
    replicas: number;
    selector: LabelSelector;
    template: PodTemplateSpec;
    volumeClaimTemplates: PersistentVolumeClaimTemplateSpec[];
}
export interface StatefulSetStatus {
    observedGeneration: number;
    replicas: number;
    currentReplicas: number;
    readyReplicas: number;
    currentRevision: string;
    updateRevision: string;
    collisionCount: number;
}
export declare class StatefulSet extends KubeObject<NamespaceScopedMetadata, StatefulSetStatus, StatefulSetSpec> {
    static readonly kind = "StatefulSet";
    static readonly namespaced = true;
    static readonly apiBase = "/apis/apps/v1/statefulsets";
    getSelectors(): string[];
    getNodeSelectors(): string[];
    getTemplateLabels(): string[];
    getTolerations(): import("../kube-object").Toleration[];
    getAffinity(): import("../kube-object").Affinity;
    getAffinityNumber(): number;
    getReplicas(): number;
    getImages(): string[];
}
