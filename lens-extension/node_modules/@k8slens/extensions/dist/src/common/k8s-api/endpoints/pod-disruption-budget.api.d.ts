/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { LabelSelector, NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
export interface PodDisruptionBudgetSpec {
    minAvailable: string;
    maxUnavailable: string;
    selector: LabelSelector;
}
export interface PodDisruptionBudgetStatus {
    currentHealthy: number;
    desiredHealthy: number;
    disruptionsAllowed: number;
    expectedPods: number;
}
export declare class PodDisruptionBudget extends KubeObject<NamespaceScopedMetadata, PodDisruptionBudgetStatus, PodDisruptionBudgetSpec> {
    static readonly kind = "PodDisruptionBudget";
    static readonly namespaced = true;
    static readonly apiBase = "/apis/policy/v1beta1/poddisruptionbudgets";
    getSelectors(): string[];
    getMinAvailable(): string;
    getMaxUnavailable(): string;
    getCurrentHealthy(): number;
    getDesiredHealthy(): number;
}
export declare class PodDisruptionBudgetApi extends KubeApi<PodDisruptionBudget> {
    constructor(opts?: DerivedKubeApiOptions);
}
