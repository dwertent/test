/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { MetricData, IMetricsReqParams } from "./metrics.api";
import { KubeObject } from "../kube-object";
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
export declare class ClusterApi extends KubeApi<Cluster> {
    /**
     * @deprecated This field is legacy and never used.
     */
    static kind: string;
    /**
     * @deprecated This field is legacy and never used.
     */
    static namespaced: boolean;
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
}
export declare function getMetricsByNodeNames(nodeNames: string[], params?: IMetricsReqParams): Promise<ClusterMetricData>;
export declare enum ClusterStatus {
    ACTIVE = "Active",
    CREATING = "Creating",
    REMOVING = "Removing",
    ERROR = "Error"
}
export interface ClusterMetricData extends Partial<Record<string, MetricData>> {
    memoryUsage: MetricData;
    memoryRequests: MetricData;
    memoryLimits: MetricData;
    memoryCapacity: MetricData;
    cpuUsage: MetricData;
    cpuRequests: MetricData;
    cpuLimits: MetricData;
    cpuCapacity: MetricData;
    podUsage: MetricData;
    podCapacity: MetricData;
    fsSize: MetricData;
    fsUsage: MetricData;
}
export interface Cluster {
    spec: {
        clusterNetwork?: {
            serviceDomain?: string;
            pods?: {
                cidrBlocks?: string[];
            };
            services?: {
                cidrBlocks?: string[];
            };
        };
        providerSpec: {
            value: {
                profile: string;
            };
        };
    };
    status?: {
        apiEndpoints: {
            host: string;
            port: string;
        }[];
        providerStatus: {
            adminUser?: string;
            adminPassword?: string;
            kubeconfig?: string;
            processState?: string;
            lensAddress?: string;
        };
        errorMessage?: string;
        errorReason?: string;
    };
}
export declare class Cluster extends KubeObject {
    static kind: string;
    static apiBase: string;
    static namespaced: boolean;
    getStatus(): ClusterStatus;
}
