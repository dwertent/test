/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { KubeObjectMetadata, KubeObjectScope, NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { KubeJsonApiData } from "../kube-json-api";
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
export interface ConfigMapData extends KubeJsonApiData<KubeObjectMetadata<KubeObjectScope.Namespace>, void, void> {
    data?: Partial<Record<string, string>>;
    binaryData?: Partial<Record<string, string>>;
    immutable?: boolean;
}
export declare class ConfigMap extends KubeObject<NamespaceScopedMetadata, void, void> {
    static kind: string;
    static namespaced: boolean;
    static apiBase: string;
    data: Partial<Record<string, string>>;
    binaryData: Partial<Record<string, string>>;
    immutable?: boolean;
    constructor({ data, binaryData, immutable, ...rest }: ConfigMapData);
    getKeys(): string[];
}
export declare class ConfigMapApi extends KubeApi<ConfigMap, ConfigMapData> {
    constructor(opts?: DerivedKubeApiOptions);
}
