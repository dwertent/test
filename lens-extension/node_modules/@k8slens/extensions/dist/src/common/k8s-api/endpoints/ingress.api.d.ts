/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { NamespaceScopedMetadata, TypedLocalObjectReference } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { MetricData } from "./metrics.api";
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { RequireExactlyOne } from "type-fest";
export declare class IngressApi extends KubeApi<Ingress> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
}
export declare function getMetricsForIngress(ingress: string, namespace: string): Promise<IngressMetricData>;
export interface IngressMetricData extends Partial<Record<string, MetricData>> {
    bytesSentSuccess: MetricData;
    bytesSentFailure: MetricData;
    requestDurationSeconds: MetricData;
    responseDurationSeconds: MetricData;
}
export interface ILoadBalancerIngress {
    hostname?: string;
    ip?: string;
}
export interface ExtensionsBackend {
    serviceName?: string;
    servicePort?: number | string;
}
export interface NetworkingBackend {
    service?: IngressService;
}
export declare type IngressBackend = (ExtensionsBackend | NetworkingBackend) & {
    resource?: TypedLocalObjectReference;
};
export interface IngressService {
    name: string;
    port: RequireExactlyOne<{
        name: string;
        number: number;
    }>;
}
/**
 * Format an ingress backend into the name of the service and port
 * @param backend The ingress target
 */
export declare function getBackendServiceNamePort(backend: IngressBackend | undefined): string;
export interface HTTPIngressPath {
    pathType: "Exact" | "Prefix" | "ImplementationSpecific";
    path?: string;
    backend?: IngressBackend;
}
export interface HTTPIngressRuleValue {
    paths: HTTPIngressPath[];
}
export interface IngressRule {
    host?: string;
    http?: HTTPIngressRuleValue;
}
export interface IngressSpec {
    tls: {
        secretName: string;
    }[];
    rules?: IngressRule[];
    backend?: ExtensionsBackend;
    /**
     * The default backend which is exactly on of:
     * - service
     * - resource
     */
    defaultBackend?: RequireExactlyOne<NetworkingBackend & {
        resource: {
            apiGroup: string;
            kind: string;
            name: string;
        };
    }>;
}
export interface IngressStatus {
    loadBalancer: {
        ingress?: ILoadBalancerIngress[];
    };
}
export declare class Ingress extends KubeObject<NamespaceScopedMetadata, IngressStatus, IngressSpec> {
    static readonly kind = "Ingress";
    static readonly namespaced = true;
    static readonly apiBase = "/apis/networking.k8s.io/v1/ingresses";
    getRules(): IngressRule[];
    getRoutes(): string[];
    getServiceNamePort(): ExtensionsBackend | undefined;
    getHosts(): string[];
    getPorts(): string;
    getLoadBalancers(): (string | undefined)[];
}
export interface ComputedIngressRoute {
    displayAsLink: boolean;
    pathname: string;
    url: string;
    service: string;
}
export declare function computeRuleDeclarations(ingress: Ingress, rule: IngressRule): ComputedIngressRoute[];
export declare function computeRouteDeclarations(ingress: Ingress): ComputedIngressRoute[];
