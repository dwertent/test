/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { NamespaceScopedMetadata, ObjectReference } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { JobTemplateSpec } from "./types/job-template-spec";
export declare class CronJobApi extends KubeApi<CronJob> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
    suspend(params: {
        namespace: string;
        name: string;
    }): Promise<import("../kube-json-api").KubeJsonApiData<import("../kube-object").KubeJsonApiObjectMetadata<import("../kube-object").KubeObjectScope>, unknown, unknown>>;
    resume(params: {
        namespace: string;
        name: string;
    }): Promise<import("../kube-json-api").KubeJsonApiData<import("../kube-object").KubeJsonApiObjectMetadata<import("../kube-object").KubeObjectScope>, unknown, unknown>>;
}
export interface CronJobSpec {
    concurrencyPolicy?: string;
    failedJobsHistoryLimit?: number;
    jobTemplate?: JobTemplateSpec;
    schedule: string;
    startingDeadlineSeconds?: number;
    successfulJobsHistoryLimit?: number;
    suspend?: boolean;
}
export interface CronJobStatus {
    lastScheduleTime?: string;
    lastSuccessfulTime?: string;
    active?: ObjectReference[];
}
export declare class CronJob extends KubeObject<NamespaceScopedMetadata, CronJobStatus, CronJobSpec> {
    static readonly kind = "CronJob";
    static readonly namespaced = true;
    static readonly apiBase = "/apis/batch/v1beta1/cronjobs";
    getSuspendFlag(): string;
    getLastScheduleTime(): string;
    getSchedule(): string;
    isNeverRun(): boolean;
    isSuspend(): boolean | undefined;
}
