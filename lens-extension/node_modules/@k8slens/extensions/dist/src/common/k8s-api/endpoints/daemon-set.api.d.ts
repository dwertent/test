/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { PodMetricData } from "./pod.api";
import type { KubeObjectStatus, LabelSelector, NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { PodTemplateSpec } from "./types/pod-template-spec";
export interface RollingUpdateDaemonSet {
    maxUnavailable?: number | string;
    maxSurge?: number | string;
}
export interface DaemonSetUpdateStrategy {
    type: string;
    rollingUpdate: RollingUpdateDaemonSet;
}
export interface DaemonSetSpec {
    selector: LabelSelector;
    template: PodTemplateSpec;
    updateStrategy: DaemonSetUpdateStrategy;
    minReadySeconds?: number;
    revisionHistoryLimit?: number;
}
export interface DaemonSetStatus extends KubeObjectStatus {
    collisionCount?: number;
    currentNumberScheduled: number;
    desiredNumberScheduled: number;
    numberAvailable?: number;
    numberMisscheduled: number;
    numberReady: number;
    numberUnavailable?: number;
    observedGeneration?: number;
    updatedNumberScheduled?: number;
}
export declare class DaemonSet extends KubeObject<NamespaceScopedMetadata, DaemonSetStatus, DaemonSetSpec> {
    static kind: string;
    static namespaced: boolean;
    static apiBase: string;
    getSelectors(): string[];
    getNodeSelectors(): string[];
    getTemplateLabels(): string[];
    getTolerations(): import("../kube-object").Toleration[];
    getAffinity(): import("../kube-object").Affinity | undefined;
    getAffinityNumber(): number;
    getImages(): string[];
}
export declare class DaemonSetApi extends KubeApi<DaemonSet> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
}
export declare function getMetricsForDaemonSets(daemonsets: DaemonSet[], namespace: string, selector?: string): Promise<PodMetricData>;
