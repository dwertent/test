/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { DerivedKubeApiOptions, IgnoredKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { PodContainer, PodMetricData, PodSpec } from "./pod.api";
import type { KubeObjectStatus, LabelSelector, NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
export interface JobSpec {
    parallelism?: number;
    completions?: number;
    backoffLimit?: number;
    selector?: LabelSelector;
    template: {
        metadata: {
            creationTimestamp?: string;
            labels?: Partial<Record<string, string>>;
            annotations?: Partial<Record<string, string>>;
        };
        spec: PodSpec;
    };
    containers?: PodContainer[];
    restartPolicy?: string;
    terminationGracePeriodSeconds?: number;
    dnsPolicy?: string;
    serviceAccountName?: string;
    serviceAccount?: string;
    schedulerName?: string;
}
export interface JobStatus extends KubeObjectStatus {
    startTime: string;
    completionTime: string;
    succeeded: number;
}
export declare class Job extends KubeObject<NamespaceScopedMetadata, JobStatus, JobSpec> {
    static readonly kind = "Job";
    static readonly namespaced = true;
    static readonly apiBase = "/apis/batch/v1/jobs";
    getSelectors(): string[];
    getNodeSelectors(): string[];
    getTemplateLabels(): string[];
    getTolerations(): import("../kube-object").Toleration[];
    getAffinity(): import("../kube-object").Affinity | undefined;
    getAffinityNumber(): number;
    getDesiredCompletions(): number;
    getCompletions(): number;
    getParallelism(): number | undefined;
    getCondition(): import("../kube-object").BaseKubeObjectCondition | undefined;
    getImages(): string[];
}
export declare class JobApi extends KubeApi<Job> {
    constructor(opts?: DerivedKubeApiOptions & IgnoredKubeApiOptions);
}
export declare function getMetricsForJobs(jobs: Job[], namespace: string, selector?: string): Promise<PodMetricData>;
