/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { BaseKubeObjectCondition, ClusterScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { JSONSchemaProps } from "./types/json-schema-props";
interface AdditionalPrinterColumnsCommon {
    name: string;
    type: "integer" | "number" | "string" | "boolean" | "date";
    priority?: number;
    format?: "int32" | "int64" | "float" | "double" | "byte" | "binary" | "date" | "date-time" | "password";
    description?: string;
}
export declare type AdditionalPrinterColumnsV1 = AdditionalPrinterColumnsCommon & {
    jsonPath: string;
};
declare type AdditionalPrinterColumnsV1Beta = AdditionalPrinterColumnsCommon & {
    JSONPath: string;
};
export interface CustomResourceValidation {
    openAPIV3Schema?: JSONSchemaProps;
}
export interface CustomResourceDefinitionVersion {
    name: string;
    served: boolean;
    storage: boolean;
    schema?: CustomResourceValidation;
    additionalPrinterColumns?: AdditionalPrinterColumnsV1[];
}
export interface CustomResourceDefinitionNames {
    categories?: string[];
    kind: string;
    listKind?: string;
    plural: string;
    shortNames?: string[];
    singular?: string;
}
export interface CustomResourceConversion {
    strategy?: string;
    webhook?: WebhookConversion;
}
export interface WebhookConversion {
    clientConfig?: WebhookClientConfig[];
    conversionReviewVersions: string[];
}
export interface WebhookClientConfig {
    caBundle?: string;
    url?: string;
    service?: ServiceReference;
}
export interface ServiceReference {
    name: string;
    namespace: string;
    path?: string;
    port?: number;
}
export interface CustomResourceDefinitionSpec {
    group: string;
    /**
     * @deprecated for apiextensions.k8s.io/v1 but used in v1beta1
     */
    version?: string;
    names: CustomResourceDefinitionNames;
    scope: "Namespaced" | "Cluster";
    /**
     * @deprecated for apiextensions.k8s.io/v1 but used in v1beta1
     */
    validation?: object;
    versions?: CustomResourceDefinitionVersion[];
    conversion?: CustomResourceConversion;
    /**
     * @deprecated for apiextensions.k8s.io/v1 but used in v1beta1
     */
    additionalPrinterColumns?: AdditionalPrinterColumnsV1Beta[];
    preserveUnknownFields?: boolean;
}
export interface CustomResourceDefinitionConditionAcceptedNames {
    plural: string;
    singular: string;
    kind: string;
    shortNames: string[];
    listKind: string;
}
export interface CustomResourceDefinitionStatus {
    conditions?: BaseKubeObjectCondition[];
    acceptedNames: CustomResourceDefinitionConditionAcceptedNames;
    storedVersions: string[];
}
export declare class CustomResourceDefinition extends KubeObject<ClusterScopedMetadata, CustomResourceDefinitionStatus, CustomResourceDefinitionSpec> {
    static kind: string;
    static namespaced: boolean;
    static apiBase: string;
    getResourceUrl(): string;
    getResourceApiBase(): string;
    getPluralName(): string;
    getResourceKind(): string;
    getResourceTitle(): string;
    getGroup(): string;
    getScope(): "Namespaced" | "Cluster";
    getPreferedVersion(): CustomResourceDefinitionVersion;
    getVersion(): string;
    isNamespaced(): boolean;
    getStoredVersions(): string;
    getNames(): CustomResourceDefinitionNames;
    getConversion(): string;
    getPrinterColumns(ignorePriority?: boolean): AdditionalPrinterColumnsV1[];
    getValidation(): string;
    getConditions(): {
        isReady: boolean;
        tooltip: string;
        lastTransitionTime?: string | undefined;
        message?: string | undefined;
        reason?: string | undefined;
        status: "True" | "False" | "Unknown";
        type: string;
    }[];
}
export declare class CustomResourceDefinitionApi extends KubeApi<CustomResourceDefinition> {
    constructor(opts?: DerivedKubeApiOptions);
}
export {};
