/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { PodMetricData, PodSpec } from "./pod.api";
import type { KubeObjectStatus, LabelSelector, NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
export declare class DeploymentApi extends KubeApi<Deployment> {
    constructor(opts?: DerivedKubeApiOptions);
    protected getScaleApiUrl(params: {
        namespace: string;
        name: string;
    }): string;
    getReplicas(params: {
        namespace: string;
        name: string;
    }): Promise<number>;
    scale(params: {
        namespace: string;
        name: string;
    }, replicas: number): Promise<import("../kube-json-api").KubeJsonApiData<import("../kube-object").KubeJsonApiObjectMetadata<import("../kube-object").KubeObjectScope>, unknown, unknown>>;
    restart(params: {
        namespace: string;
        name: string;
    }): Promise<import("../kube-json-api").KubeJsonApiData<import("../kube-object").KubeJsonApiObjectMetadata<import("../kube-object").KubeObjectScope>, unknown, unknown>>;
}
export declare function getMetricsForDeployments(deployments: Deployment[], namespace: string, selector?: string): Promise<PodMetricData>;
export interface DeploymentSpec {
    replicas: number;
    selector: LabelSelector;
    template: {
        metadata: {
            creationTimestamp?: string;
            labels: Partial<Record<string, string>>;
            annotations?: Partial<Record<string, string>>;
        };
        spec: PodSpec;
    };
    strategy: {
        type: string;
        rollingUpdate: {
            maxUnavailable: number;
            maxSurge: number;
        };
    };
}
export interface DeploymentStatus extends KubeObjectStatus {
    observedGeneration: number;
    replicas: number;
    updatedReplicas: number;
    readyReplicas: number;
    availableReplicas?: number;
    unavailableReplicas?: number;
}
export declare class Deployment extends KubeObject<NamespaceScopedMetadata, DeploymentStatus, DeploymentSpec> {
    static kind: string;
    static namespaced: boolean;
    static apiBase: string;
    getSelectors(): string[];
    getNodeSelectors(): string[];
    getTemplateLabels(): string[];
    getTolerations(): import("../kube-object").Toleration[];
    getAffinity(): import("../kube-object").Affinity | undefined;
    getAffinityNumber(): number;
    getConditions(activeOnly?: boolean): import("../kube-object").BaseKubeObjectCondition[];
    getConditionsText(activeOnly?: boolean): string;
    getReplicas(): number;
}
