/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { KubeObjectMetadata, KubeObjectScope, NamespaceScopedMetadata, ObjectReference } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
import type { KubeJsonApiData } from "../kube-json-api";
export declare function formatEndpointSubset(subset: EndpointSubset): string;
export interface ForZone {
    name: string;
}
export interface EndpointHints {
    forZones?: ForZone[];
}
export interface EndpointConditions {
    ready?: boolean;
    serving?: boolean;
    terminating?: boolean;
}
export interface EndpointData {
    addresses: string[];
    conditions?: EndpointConditions;
    hints?: EndpointHints;
    hostname?: string;
    nodeName?: string;
    targetRef?: ObjectReference;
    zone?: string;
}
export interface EndpointPort {
    appProtocol?: string;
    name?: string;
    protocol?: string;
    port: number;
}
export interface EndpointAddress {
    hostname?: string;
    ip: string;
    nodeName?: string;
    targetRef?: ObjectReference;
}
export interface EndpointSubset {
    addresses?: EndpointAddress[];
    notReadyAddresses?: EndpointAddress[];
    ports?: EndpointPort[];
}
export interface EndpointsData extends KubeJsonApiData<KubeObjectMetadata<KubeObjectScope.Namespace>, void, void> {
    subsets?: EndpointSubset[];
}
export declare class Endpoints extends KubeObject<NamespaceScopedMetadata, void, void> {
    static kind: string;
    static namespaced: boolean;
    static apiBase: string;
    subsets?: EndpointSubset[];
    constructor({ subsets, ...rest }: EndpointsData);
    getEndpointSubsets(): Required<EndpointSubset>[];
    toString(): string;
}
export declare class EndpointsApi extends KubeApi<Endpoints, EndpointsData> {
    constructor(opts?: DerivedKubeApiOptions);
}
