/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { NamespaceScopedMetadata } from "../kube-object";
import { KubeObject } from "../kube-object";
import type { DerivedKubeApiOptions } from "../kube-api";
import { KubeApi } from "../kube-api";
export declare enum LimitType {
    CONTAINER = "Container",
    POD = "Pod",
    PVC = "PersistentVolumeClaim"
}
export declare enum Resource {
    MEMORY = "memory",
    CPU = "cpu",
    STORAGE = "storage",
    EPHEMERAL_STORAGE = "ephemeral-storage"
}
export declare enum LimitPart {
    MAX = "max",
    MIN = "min",
    DEFAULT = "default",
    DEFAULT_REQUEST = "defaultRequest",
    MAX_LIMIT_REQUEST_RATIO = "maxLimitRequestRatio"
}
declare type LimitRangeParts = Partial<Record<LimitPart, Record<string, string>>>;
export interface LimitRangeItem extends LimitRangeParts {
    type: string;
}
export interface LimitRangeSpec {
    limits: LimitRangeItem[];
}
export declare class LimitRange extends KubeObject<NamespaceScopedMetadata, void, LimitRangeSpec> {
    static readonly kind = "LimitRange";
    static readonly namespaced = true;
    static readonly apiBase = "/api/v1/limitranges";
    getContainerLimits(): LimitRangeItem[];
    getPodLimits(): LimitRangeItem[];
    getPVCLimits(): LimitRangeItem[];
}
export declare class LimitRangeApi extends KubeApi<LimitRange> {
    constructor(opts?: DerivedKubeApiOptions);
}
export {};
