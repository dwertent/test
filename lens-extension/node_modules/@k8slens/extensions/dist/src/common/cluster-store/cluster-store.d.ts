/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import { BaseStore } from "../base-store";
import { Cluster } from "../cluster/cluster";
import type { ClusterModel, ClusterId } from "../cluster-types";
import type { CreateCluster } from "../cluster/create-cluster-injection-token";
import type { ReadClusterConfigSync } from "./read-cluster-config.injectable";
export interface ClusterStoreModel {
    clusters?: ClusterModel[];
}
interface Dependencies {
    createCluster: CreateCluster;
    readClusterConfigSync: ReadClusterConfigSync;
}
export declare class ClusterStore extends BaseStore<ClusterStoreModel> {
    private dependencies;
    readonly displayName = "ClusterStore";
    clusters: import("mobx").ObservableMap<string, Cluster>;
    protected disposer: import("../utils").ExtendableDisposer;
    constructor(dependencies: Dependencies);
    loadInitialOnRenderer(): Promise<void>;
    provideInitialFromMain(): void;
    protected pushStateToViewsAutomatically(): void;
    registerIpcListener(): void;
    unregisterIpcListener(): void;
    pushState(): void;
    get clustersList(): Cluster[];
    get connectedClustersList(): Cluster[];
    hasClusters(): boolean;
    getById(id: ClusterId | undefined): Cluster | undefined;
    addCluster(clusterOrModel: ClusterModel | Cluster): Cluster;
    protected fromStore({ clusters }?: ClusterStoreModel): void;
    toJSON(): ClusterStoreModel;
}
export {};
