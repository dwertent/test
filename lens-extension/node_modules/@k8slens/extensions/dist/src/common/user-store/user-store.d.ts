/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import { BaseStore } from "../base-store";
import { DESCRIPTORS } from "./preferences-helpers";
import type { UserPreferencesModel, StoreType } from "./preferences-helpers";
import type { SelectedUpdateChannel } from "../application-update/selected-update-channel/selected-update-channel.injectable";
export interface UserStoreModel {
    lastSeenAppVersion: string;
    preferences: UserPreferencesModel;
}
interface Dependencies {
    selectedUpdateChannel: SelectedUpdateChannel;
}
export declare class UserStore extends BaseStore<UserStoreModel> {
    private readonly dependencies;
    readonly displayName = "UserStore";
    constructor(dependencies: Dependencies);
    lastSeenAppVersion: string;
    /**
     * used in add-cluster page for providing context
     * @deprecated No longer used
     */
    kubeConfigPath: string;
    /**
     * @deprecated No longer used
     */
    seenContexts: import("mobx").ObservableSet<string>;
    /**
     * @deprecated No longer used
     */
    newContexts: import("mobx").ObservableSet<string>;
    allowErrorReporting: StoreType<typeof DESCRIPTORS["allowErrorReporting"]>;
    allowUntrustedCAs: StoreType<typeof DESCRIPTORS["allowUntrustedCAs"]>;
    colorTheme: StoreType<typeof DESCRIPTORS["colorTheme"]>;
    terminalTheme: StoreType<typeof DESCRIPTORS["terminalTheme"]>;
    localeTimezone: StoreType<typeof DESCRIPTORS["localeTimezone"]>;
    downloadMirror: StoreType<typeof DESCRIPTORS["downloadMirror"]>;
    httpsProxy: StoreType<typeof DESCRIPTORS["httpsProxy"]>;
    shell: StoreType<typeof DESCRIPTORS["shell"]>;
    downloadBinariesPath: StoreType<typeof DESCRIPTORS["downloadBinariesPath"]>;
    kubectlBinariesPath: StoreType<typeof DESCRIPTORS["kubectlBinariesPath"]>;
    terminalCopyOnSelect: StoreType<typeof DESCRIPTORS["terminalCopyOnSelect"]>;
    terminalConfig: StoreType<typeof DESCRIPTORS["terminalConfig"]>;
    extensionRegistryUrl: StoreType<typeof DESCRIPTORS["extensionRegistryUrl"]>;
    /**
     * Download kubectl binaries matching cluster version
     */
    downloadKubectlBinaries: StoreType<typeof DESCRIPTORS["downloadKubectlBinaries"]>;
    /**
     * Whether the application should open itself at login.
     */
    openAtLogin: StoreType<typeof DESCRIPTORS["openAtLogin"]>;
    /**
     * The column IDs under each configurable table ID that have been configured
     * to not be shown
     */
    hiddenTableColumns: StoreType<typeof DESCRIPTORS["hiddenTableColumns"]>;
    /**
     * Monaco editor configs
     */
    editorConfiguration: StoreType<typeof DESCRIPTORS["editorConfiguration"]>;
    /**
     * The set of file/folder paths to be synced
     */
    syncKubeconfigEntries: StoreType<typeof DESCRIPTORS["syncKubeconfigEntries"]>;
    get isNewVersion(): boolean;
    get resolvedShell(): string | undefined;
    startMainReactions(): void;
    /**
     * Checks if a column (by ID) for a table (by ID) is configured to be hidden
     * @param tableId The ID of the table to be checked against
     * @param columnIds The list of IDs the check if one is hidden
     * @returns true if at least one column under the table is set to hidden
     */
    isTableColumnHidden(tableId: string, ...columnIds: (string | undefined)[]): boolean;
    /**
     * Toggles the hidden configuration of a table's column
     */
    toggleTableColumnVisibility(tableId: string, columnId: string): void;
    resetTheme(): void;
    saveLastSeenAppVersion(): void;
    protected fromStore({ lastSeenAppVersion, preferences }?: Partial<UserStoreModel>): void;
    toJSON(): UserStoreModel;
}
export {};
