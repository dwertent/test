/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
/// <reference types="node" />
import type { editor } from "monaco-editor";
import type { ObservableMap } from "mobx";
export interface KubeconfigSyncEntry extends KubeconfigSyncValue {
    filePath: string;
}
export interface KubeconfigSyncValue {
}
export interface TerminalConfig {
    fontSize: number;
    fontFamily: string;
}
export declare const defaultTerminalConfig: TerminalConfig;
interface BaseEditorConfiguration extends Required<Pick<editor.IStandaloneEditorConstructionOptions, "minimap" | "tabSize" | "fontSize" | "fontFamily">> {
    lineNumbers: NonNullable<Exclude<editor.IStandaloneEditorConstructionOptions["lineNumbers"], Function>>;
}
export declare type EditorConfiguration = Required<BaseEditorConfiguration>;
export declare const defaultEditorConfig: EditorConfiguration;
export declare type StoreType<P> = P extends PreferenceDescription<unknown, infer Store> ? Store : never;
export interface PreferenceDescription<T, R = T> {
    fromStore(val: T | undefined): R;
    toStore(val: R): T | undefined;
}
export declare const defaultLocaleTimezone = "UTC";
export interface DownloadMirror {
    url: string;
    label: string;
    platforms: Set<NodeJS.Platform>;
}
export declare const defaultPackageMirror = "default";
export declare const packageMirrors: Map<string, DownloadMirror>;
export declare type ExtensionRegistryLocation = "default" | "npmrc" | "custom";
export declare type ExtensionRegistry = {
    location: "default" | "npmrc";
    customUrl?: undefined;
} | {
    location: "custom";
    customUrl: string;
};
export declare const defaultExtensionRegistryUrlLocation = "default";
export declare const defaultExtensionRegistryUrl = "https://registry.npmjs.org";
declare type PreferencesModelType<field extends keyof typeof DESCRIPTORS> = typeof DESCRIPTORS[field] extends PreferenceDescription<infer T, any> ? T : never;
declare type UserStoreModelType<field extends keyof typeof DESCRIPTORS> = typeof DESCRIPTORS[field] extends PreferenceDescription<any, infer T> ? T : never;
export declare type UserStoreFlatModel = {
    [field in keyof typeof DESCRIPTORS]: UserStoreModelType<field>;
};
export declare type UserPreferencesModel = {
    [field in keyof typeof DESCRIPTORS]: PreferencesModelType<field>;
} & {
    updateChannel: string;
};
export declare const DESCRIPTORS: {
    httpsProxy: PreferenceDescription<string | undefined, string | undefined>;
    shell: PreferenceDescription<string | undefined, string | undefined>;
    colorTheme: PreferenceDescription<string, string>;
    terminalTheme: PreferenceDescription<string, string>;
    localeTimezone: PreferenceDescription<string, string>;
    allowUntrustedCAs: PreferenceDescription<boolean, boolean>;
    allowErrorReporting: PreferenceDescription<boolean, boolean>;
    downloadMirror: PreferenceDescription<string, string>;
    downloadKubectlBinaries: PreferenceDescription<boolean, boolean>;
    downloadBinariesPath: PreferenceDescription<string | undefined, string | undefined>;
    kubectlBinariesPath: PreferenceDescription<string | undefined, string | undefined>;
    openAtLogin: PreferenceDescription<boolean, boolean>;
    hiddenTableColumns: PreferenceDescription<[string, string[]][], Map<string, Set<string>>>;
    syncKubeconfigEntries: PreferenceDescription<KubeconfigSyncEntry[], ObservableMap<string, KubeconfigSyncValue>>;
    editorConfiguration: PreferenceDescription<Partial<Required<BaseEditorConfiguration>> | undefined, Required<BaseEditorConfiguration>>;
    terminalCopyOnSelect: PreferenceDescription<boolean, boolean>;
    terminalConfig: PreferenceDescription<TerminalConfig, TerminalConfig>;
    extensionRegistryUrl: PreferenceDescription<ExtensionRegistry, ExtensionRegistry>;
};
export {};
