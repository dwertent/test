/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
/// <reference types="node" />
import type { EventEmitter } from "events";
import type { Disposer } from "../utils";
export declare type ListenerEvent<EM extends EventEmitter> = Parameters<Parameters<EM["on"]>[1]>[0];
export declare type ListVerifier<T extends any[]> = (args: unknown[]) => args is T;
export declare type Rest<T> = T extends [any, ...infer R] ? R : [];
/**
 * Adds a listener to `source` that waits for the first IPC message with the correct
 * argument data is sent.
 * @param channel The channel to be listened on
 * @param listener The function for the channel to be called if the args of the correct type
 * @param verifier The function to be called to verify that the args are the correct type
 */
export declare function onceCorrect<IPC extends EventEmitter, Listener extends (event: ListenerEvent<IPC>, ...args: any[]) => any>({ source, channel, listener, verifier, }: {
    source: IPC;
    channel: string;
    listener: Listener;
    verifier: ListVerifier<Rest<Parameters<Listener>>>;
}): void;
/**
 * Adds a listener to `source` that checks to verify the arguments before calling the handler.
 * @param channel The channel to be listened on
 * @param listener The function for the channel to be called if the args of the correct type
 * @param verifier The function to be called to verify that the args are the correct type
 */
export declare function onCorrect<IPC extends EventEmitter, Listener extends (event: ListenerEvent<IPC>, ...args: any[]) => any>({ source, channel, listener, verifier, }: {
    source: IPC;
    channel: string;
    listener: Listener;
    verifier: ListVerifier<Rest<Parameters<Listener>>>;
}): Disposer;
export declare function handleCorrect<Handler extends (event: Electron.IpcMainInvokeEvent, ...args: any[]) => any>({ channel, handler, verifier, }: {
    channel: string;
    handler: Handler;
    verifier: ListVerifier<Rest<Parameters<Handler>>>;
}): Disposer;
