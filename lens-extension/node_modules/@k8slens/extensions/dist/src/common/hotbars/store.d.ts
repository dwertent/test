/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import { BaseStore } from "../base-store";
import type { CatalogEntity } from "../catalog";
import type { Hotbar, CreateHotbarData, CreateHotbarOptions } from "./types";
import type { GeneralEntity } from "../catalog-entities";
import type { Logger } from "../logger";
export interface HotbarStoreModel {
    hotbars: Hotbar[];
    activeHotbarId: string;
}
interface Dependencies {
    readonly catalogCatalogEntity: GeneralEntity;
    readonly logger: Logger;
}
export declare class HotbarStore extends BaseStore<HotbarStoreModel> {
    private readonly dependencies;
    readonly displayName = "HotbarStore";
    hotbars: Hotbar[];
    private _activeHotbarId;
    constructor(dependencies: Dependencies);
    get activeHotbarId(): string;
    /**
     * If `hotbar` points to a known hotbar, make it active. Otherwise, ignore
     * @param hotbar The hotbar instance, or the index, or its ID
     */
    setActiveHotbar(hotbar: Hotbar | number | string): void;
    private hotbarIndexById;
    private hotbarIndex;
    get activeHotbarIndex(): number;
    protected fromStore(data?: Partial<HotbarStoreModel>): void;
    toJSON(): HotbarStoreModel;
    getActive(): Hotbar;
    findByName(name: string): Required<CreateHotbarData> | undefined;
    findById(id: string): Required<CreateHotbarData> | undefined;
    add(data: CreateHotbarData, { setActive }?: CreateHotbarOptions): void;
    setHotbarName(id: string, name: string): void;
    remove(hotbar: Hotbar): void;
    addToHotbar(item: CatalogEntity, cellIndex?: number): void;
    removeFromHotbar(uid: string): void;
    /**
     * Remove all hotbar items that reference the `uid`.
     * @param uid The `EntityId` that each hotbar item refers to
     * @returns A function that will (in an action) undo the removing of the hotbar items. This function will not complete if the hotbar has changed.
     */
    removeAllHotbarItems(uid: string): void;
    findClosestEmptyIndex(from: number, direction?: number): number;
    restackItems(from: number, to: number): void;
    switchToPrevious(): void;
    switchToNext(): void;
    /**
     * Checks if entity already pinned to the active hotbar
     */
    isAddedToActive(entity: CatalogEntity | null | undefined): boolean;
    getDisplayLabel(hotbar: Hotbar): string;
    getDisplayIndex(hotbar: Hotbar): string;
}
export {};
