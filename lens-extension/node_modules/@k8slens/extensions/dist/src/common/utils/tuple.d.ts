/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
/**
 * A strict N-tuple of type T
 */
export declare type Tuple<T, N extends number> = N extends N ? number extends N ? T[] : TupleOfImpl<T, N, []> : never;
declare type TupleOfImpl<T, N extends number, R extends unknown[]> = R["length"] extends N ? R : TupleOfImpl<T, N, [T, ...R]>;
/**
 * Iterates over `sources` yielding full tuples until one of the tuple arrays
 * is empty. Then it returns a tuple with the rest of each of tuples
 * @param sources The source arrays
 * @yields A tuple of the next element from each of the sources
 * @returns The tuple of all the sources as soon as at least one of the sources is exausted
 */
export declare function zip<T>(src1: T[]): Iterator<[T], Tuple<T[], 1>>;
export declare function zip<T>(src1: T[], src2: T[]): Iterator<[T, T], Tuple<T[], 2>>;
/**
 * Returns a `length` tuple filled with copies of `value`
 * @param length The size of the tuple
 * @param value The value for each of the tuple entries
 */
export declare function filled<T, L extends number>(length: L, value: T): Tuple<T, L>;
/**
 * A function for converting an explicit array to a tuple but without the `readonly` typing
 */
export declare function from<T extends any[]>(...args: T): [...T];
export {};
