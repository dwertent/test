/**
 * Copyright (c) OpenLens Authors. All rights reserved.
 * Licensed under MIT License. See LICENSE in root directory for more information.
 */
import type { SetRequired } from "type-fest";
export declare type RemoveUndefinedFromValues<K> = {
    [P in keyof K]: NonNullable<K[P]>;
};
/**
 * This type helps define which fields of some type will always be defined
 */
export declare type Defaulted<Params, DefaultParams extends keyof Params> = RemoveUndefinedFromValues<Required<Pick<Params, DefaultParams>>> & Omit<Params, DefaultParams>;
export declare type OptionVarient<Key, Base, RequiredKey extends keyof Base> = {
    type: Key;
} & Pick<Base, RequiredKey> & {
    [OtherKey in Exclude<keyof Base, RequiredKey>]?: undefined;
};
export declare type SingleOrMany<T> = T | T[];
export declare type IfEquals<T, U, Y = unknown, N = never> = (<G>() => G extends T ? 1 : 2) extends (<G>() => G extends U ? 1 : 2) ? Y : N;
export declare type MaybeSetRequired<BaseType, Keys extends keyof BaseType, Query> = Query extends true ? SetRequired<BaseType, Keys> : BaseType;
