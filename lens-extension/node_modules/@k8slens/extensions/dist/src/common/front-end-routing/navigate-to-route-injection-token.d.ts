import type { Route } from "./front-end-route-injection-token";
declare type InferParametersFrom<TRoute> = TRoute extends Route<infer TParameters> ? TParameters : never;
declare type RequiredKeys<T> = Exclude<{
    [K in keyof T]: T extends Record<K, T[K]> ? K : never;
}[keyof T], undefined>;
declare type ObjectContainingNoRequired<T> = T extends void ? never : RequiredKeys<T> extends [] ? any : never;
declare type ObjectContainsNoRequired<T> = T extends ObjectContainingNoRequired<T> ? true : false;
declare type Parameters<TParameters> = TParameters extends void ? {} : ObjectContainsNoRequired<TParameters> extends true ? {
    parameters?: TParameters;
} : {
    parameters: TParameters;
};
export declare type NavigateToRouteOptions<TRoute> = Parameters<InferParametersFrom<TRoute>> & {
    query?: Record<string, string>;
    fragment?: string;
    withoutAffectingBackButton?: boolean;
};
export declare type NavigateToRoute = <TRoute extends Route<unknown>>(route: TRoute, options?: NavigateToRouteOptions<TRoute>) => void;
export declare const navigateToRouteInjectionToken: import("@ogre-tools/injectable").InjectionToken<NavigateToRoute, void>;
export {};
